const sleep = (delay) => new Promise((resolve) => setTimeout(resolve, delay))

const encodedData = ''

allQuestionsAndAnswers = {}

while(true) {

allQuestionsAndAnswers = JSON.parse(atob(encodedData))

question = document.getElementsByClassName("stemText")[0]; // Replace all newlines with empty string
if(question == undefined){
    question = document.getElementsByClassName("stem")[0];
}
question = question.innerText.replace(/\n/g, "");
answerText = allQuestionsAndAnswers[question]
if(answerText !== undefined){
    answerText = answerText.replace(/\n/g, "").trim()
}
answerFound = false;
const answerContainer = document.getElementsByClassName("answers")[0]; // Select the container element
if (answerContainer) { // Check if the element exists
  const answerElements = answerContainer.getElementsByTagName("p"); // Select paragraphs within the container
  for (const answerElement of answerElements) {
    if (answerElement.innerText.trim().replace(/\n/g, "").trim() === answerText) {
        answerFound = true;
        answerElement.click();
      break; // Stop searching after finding the desired answer
      
    }
  }
if(!answerFound){
    const answerElements2 = answerContainer.getElementsByTagName("pre"); // Select paragraphs within the container
    for (const answerElement of answerElements2) {
      if (answerElement.innerText.trim().replace(/\n/g, "").trim() === answerText) {
          answerFound = true;
          answerElement.click();
        break; // Stop searching after finding the desired answer
        
      }
    }
}
  
} 
if(!answerFound) {
  document.getElementsByClassName("answers")[0].getElementsByClassName("answer")[0].click()
}

await sleep(2000)

nextQuestionBtn = document.getElementsByClassName("submitButton")[0]

if (nextQuestionBtn == undefined){
      break  
} 
nextQuestionBtn.click()
await sleep(2000)
nextQuestionBtn = document.getElementsByClassName("submitButton")[0]

if (nextQuestionBtn == undefined){
      break
  }
nextQuestionBtn.click()
await sleep(4000) // Sleep for 4 secs for the HTML to load
                                    
}

