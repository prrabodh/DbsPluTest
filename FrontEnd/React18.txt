React18

set1

1. 
What do you use the React Testing Library for? 
 
 	 	 	To interact with Document Object Model (DOM) nodes and test components without going into their applied details
2. 
By default, where could you apply automatic batching after running the command npm install react@17.0.0 react-dom@17.0.0?
 
 	 	 	Event handlers
3. 
Which test runner helps in a real browser environment and works explicitly? 
 
 	 	 	mocha
4. 
The App component calls the Foo component three times, each time with a different argument. What tag would you use in place of P and Q to accommodate all three greeting messages within one node? 

function Foo(props) {
  return (	
   <P> Hello {props.name} </P>
  );
}

function App() {
  return (  
  <Q>
    <Foo name="xyz" />	
    <Foo name="abc" />	
    <Foo name="pqr" />	
  </Q>
  );     
}
 
 	 	 	React.Fragment and React.Fragment
5. 
What is the alternative syntax for the expression "&lt;100"? 
 
 	 	 	{'<100'}
6. 
You write code to display text that should work across browsers using the inline Cascading Style Sheet (CSS) as follows: 

const customProp = {
  webkitTransition: 'all',
  msTransition: 'all'
};

function Foo() {
  return <div style={customProp}>This is a sample text.</div>;
}

function App() {	
  return <Foo />
}

The text is visible on a Google Chrome page but you receive a warning stating, "Unsupported vendor-prefixed style property". How can you get rid of this warning? 
 
 	 	 	Start webkitTransition with a capital letter.
7. 
You split a large component into two components: Employee and UserInfo. The UserInfo component returns the name and ID of an employee. Based on the following starter code, how can you write the UserInfo code? 

function Employee(props) {
  return (
    <div>
      <UserInfo user={props.info} />
      <div> {props.brief} </div>
    </div>
  );
}

const employee = {
  workTitle: 'I work in XYZ department',
  basics: {
    name: 'ABC',
    id: 'PR4532'
  }
};

function App() {	
  return <Employee    
    brief={employee.workTitle}
    info={employee.basics} />;
}
 
 	 	 	function UserInfo(props) {
  return (
    <div>      
      <div>{props.user.name}</div>	  
      <div>{props.user.id}</div>	  
    </div>
  );
}
8. 
You must create a section on the web page that holds two descriptions. Each section's respective button must control its visibility. Pressing a button must lead to two actions. The first action shows the current description and the second action hides the other description. You run the following script and click on the available button, but it leads to no action. Why?

function Shelf({ children, isClicked, onAction }) {  
  return (
    <section>      
      {isClicked ? (
        <p>{ children }</p>
      ) : (
        <button onClick={onAction}>
          Expand
        </button>
      )}
    </section>
  );
}

function App() {
  const [tempValue, setTempValue] = useState(0);
  return (
    <>      
      <Shelf isClicked={tempValue === 0} onAction={() => setTempValue(0)}>
        Hello, user!
      </Shelf>
      <Shelf isClicked={tempValue === 1} onAction={() => setTempValue(0)}>
        Welcome to Pluralsight. 
      </Shelf>
    </>
  );
} 
 
 	 	 	The setTempValue of the second Shelf component is not set to 1.
9. 
The following code snippet takes a name from a user and displays it through an alert box. 

function App() {
  const [msg, setMsg] = useState('');
 
  function handleAction() {
    alert(`Message: ${msg}`);
  }
 
  return (
    <>
      <form onSubmit={handleAction}>
        <label>Post your message:</label>
        <input value={msg} onChange={(e) => setMsg(e.target.value)} />
        <input type="submit" value="Press" />
      </form>
    </>
  );
}

You want to know which value variable the component will display as the last result. Which is the correct option? 
 
 	 	 	{msg}
10. 
How can you implement the most effective brunch production build into your React project? 
 
 	 	 	By installing the terser-brunch plugin
11. 
Which keyword would you use to split a functional component and create two functional components? 
 
 	 	 	function
12. 
What rule must a web component class follow before you can include it in a React component?
 
 	 	 	The class name must begin with an upper case letter and use a hyphen.
13. 
Which conditional statement does the conditional operator use for rendering inline elements? 
 
 	 	 	if-else
14. 
You develop a React application that must use multiple profilers to measure different parts of your application. How can you implement this into the code? 
 
 	 	 	render(
 <App>
  <Profiler id="First" onRender={callback}>
   ...
   <Profiler id="FirstIn" onRender={callback}>
    ...
   </Profiler>
  </Profiler>
  <Profiler id="Second" onRender={callback}>
   ...
  </Profiler>
  </App>
);
15. 
What can a higher-order component (HOC) return?
 
 	 	 	A function
16. 
Which statement is correct about a custom hook? 
 
 	 	 	You can have a custom hook with no arguments.
17. 
Which library provides the createRoot function? 
 
 	 	 	react-dom/client
18. 
You develop a guest room that multiple users can join over a video call. You test your application and the application has a component with an unsafe lifecycle. You upgrade to React 18 from React 17, but the issue remains intact. How would you identify these unsafe lifecycles?
 
 	 	 	Run the React.StrictMode checks against the component and its descendants in a development mode.
19. 
Which HTML tag can maintain its state and only change when a user asks it to? 
 
 	 	 	<textarea>
20. 
How can you make your custom test files available in a jest test file without using relative imports? 
 
 	 	 	Add the files into the jest moduleDirectories.

set2

1. 
What do you use the React Testing Library for? 
 
 	 	 	To interact with Document Object Model (DOM) nodes and test components without going into their applied details
2. 
You write a Syntactically Awesome Style Sheets (SASS) Cascading Style Sheets (CSS) file that you must import in your main script App.js. How can you import the file so that the SASS classes cover only two components and not the complete script? 
 
 	 	 	import styles from './style.module.scss';
3. 
When would you use the npm run build command in your React project? 
 
 	 	 	When you must deploy your project to production
4. 
You are creating an application using uncontrolled components. The normal function of a React lifecycle is to override the value attribute of the DOM with the form element, however. What changes can you make in your code to leave the subsequent updates uncontrolled? 
 
 	 	 	Use defaultValue instead of value.
5. 
What is wrong with the following code snippet? 

import {render, waitFor, screen} from '@testing-library/react'
...
...

fireEvent.click(screen.getByText('Load Greeting'))
 await waitFor(() =>
 screen.getByRole('heading'),
)
 
 	 	 	The fireEvent method is not imported.
6. 
What does automatic batching improve in React 18?
 
 	 	 	Application performance
7. 
How would you transform the following code into one line? 

var overall = useState('code'); 
var myState = overall[0]; 
var setMyState = overall[1]; 
 
 	 	 	var [myState, setMyState] = useState('code');
8. 
A component called App calls another functional component called Foo with no arguments. How can you create Foo to increment a state by five (starting from 0) when a user clicks a button? 
 
 	 	 	function Foo() {
 const [count, setCount] = useState(0);
 return (	
   <div>
       <p>{count}</p>
        <button onClick={() => setCount(count + 5)}>
         Press here
        </button>
   </div>
 );
}
9. 
Which built-in hook lets you directly access a Document Object Model (DOM) element? 
 
 	 	 	useRef
10. 
You create an event and use it inside your App component as follows:

function App() {
  function handleAction() {
    alert('Hello, user!');
  }

  return (
    <button onClick={handleAction()}>
      Display message
    </button>
  );
}

You want to create a button on the web page which, when you click it, displays the message, "Hello, user!" inside a pop-up box. On running the above script, you receive the pop-up without performing any action. Why? 
 
 	 	 	You are calling the function, handleAction(), inside onClick instead of passing handleAction.
11. 
Which package holds the useState hook? 
 
 	 	 	react
12. 
Which syntax would you use to call a sub-component function inside a main function? 
 
 	 	 	<SubComponent />
13. 
What is wrong with the following code? 

const prices = (100, 254, 3543, 41455, 52512);
render(
  <PriceList prices={prices} />,
  document.getElementById('root')
);
 
 	 	 	It uses () braces in const prices = (100, 254, 3543, 41455, 52512);.
14. 
A component, Foo, accepts one argument from a user. How can you rewrite the component Foo to make it less verbose? 

function Foo(props) {
const g = {props.itemNo}
return <div> Item number: g</div>
}

function App() {	
return <Foo itemNo={70}/> ;
}
 
 	 	 	function Foo(props) {
return <div> Item number: {props.itemNo}</div>
}
15. 
You create an external Cascading Style Sheet (CSS) and call it inside your component Foo as follows: 

/ style.css
.button {
  cursor: crosshair;
  padding: 80px;
  background: green;
}

-----------------------------------------------

// App.js
import React, { useState } from 'react';
import './style.css';

function Foo() {
  const [count, setCount] = useState(0);
  return (
    <div>
      <p>{count}</p>
      <button style={{cursor:'grab'}} 
              className="button" 
              onClick={() => setCount(count + 1)}>
        Double-click
      </button>
    </div>
  );
}

function App() {	
  return <Foo />
}

export default App;

The component renders successfully but the mouse pointer changes into a grab icon instead of a crosshair. Why? 
 
 	 	 	The inline style takes precedence over the external CSS style.
16. 
What does <input type = "file" /> allow a user to do? 
 
 	 	 	It lets a user upload one or more files to a server.
17. 
You write a component Foo with a sentence that is broken into three separate lines as follows: 

function Foo() {
  return <div> 
  Baby panda
 
  lives in a
  forest.
  </div>
}

function App() {	
return <Foo/> ;
}

On running the code, you receive the complete statement in one line. What changes must you make in the component Foo to display the statement on different lines? 
 
 	 	 	function Foo() {
  return <div> 
  Baby panda<br/><br/>  
  lives in a<br/>
  forest.
  </div>
}
18. 
You write code in a Syntactically Awesome Style Sheets (SASS) Cascading Style Sheets (CSS) style.scss file and call it using the code import './style.scss' in your App.js file. Both the files are free of syntactical errors, but when you render the script, you receive an error, "Cannot find module 'sass'". How can you resolve the error? 
 
 	 	 	Install the SASS module npm i -g sass.
19. 
Which attribute specifies an inline Cascading Style Sheet (CSS)? 
 
 	 	 	style
20. 
Which browsers is React 18 compatible with?
 
 	 	 	Google Chrome and Mozilla Firefox

set3

1. 
Which keyword would you use to split a functional component and create two functional components? 
 
 	 	 	function
2. 
Which component is equivalent to the following component App? 

function App() {
 const props = {"p1": "abc", "p2": "cvg"}
 return <Foo {...props} />;
}
 
 	 	 	function App() {
 return <Foo p1="abc" p2="cvg" />;
}
3. 
How would you transform the following code into one line? 

var overall = useState('code'); 
var myState = overall[0]; 
var setMyState = overall[1]; 
 
 	 	 	var [myState, setMyState] = useState('code');
4. 
Why do you use a key inside your React code? 
 
 	 	 	It identifies modifications made on a list of elements.
5. 
You are creating an application that uses the following code snippet: 

<label> Is going on a tour: </label>
<input value={chkBox} onChange={(e) => setChkBox(e.target.value)} />
<br />
<label> Number of Students: </label>
<input value={stuNums} onChange={(e) => setStuNums(e.target.value)} />

When the application runs, it should be able to arrive at the following output: 

Is going on a tour: ☑
Number of students: 20

On running the code, you do not receive a checkbox for the first input and you can provide a non-numeric value to the second input as well. What is causing these two issues?  
 
 	 	 	The type property is missing from both the <input> tags.
6. 
Which word would you prefix to a custom hook while assigning its name? 
 
 	 	 	use
7. 
What is the length of the expression {"null"} in the following component? 

function Foo(props) {
return <div>{props.ele.length}</div>;
}

function App() {
  return <Foo ele = {"null"}/>;
}
 
 	 	 	4
8. 
You create a functional component, Foo, and store it in a file Foo.js. How would you import Foo inside App.js with the following project structure? 

src\
    sub\
      Foo.js
    App.js
    index.js
    ...
 
 	 	 	import Foo from './sub/Foo.js';
9. 
What does the key keyword refer to in the context of React's lists and keys? 
 
 	 	 	A string attribute that uniquely identifies elements of a list
10. 
Which syntax is valid for importing useState and useEffect hooks together?  
 
 	 	 	import { useState, useEffect } from 'react';
11. 
Which syntax would you use to call a sub-component function inside a main function? 
 
 	 	 	<SubComponent />
12. 
You create a JavaScript Syntax Extension (JSX) that holds two conditions. The first condition can output either true or false, whereas the second condition always results in a number. How would you display the number only if the first expression is true? 
 
 	 	 	Place the logical && operator in between the two conditions.
13. 
You write a functional component called Foo in a script, Foo.js, as follows: 

function Foo() {
  return <> Hello, Pluralsight! </>
}

How would you complete this script so that App.js can import the main script? 
 
 	 	 	export default Foo;
14. 
You have a list whose order of elements may change. What must you implement in your code to uniquely identify the elements of the list? 
 
 	 	 	key = {value.id}
15. 
How can you create a list of elements before passing it into the map() function? 
 
 	 	 	const num = [34, 56, 34, 23]
16. 
How would you use the command-line interface to start your React project once you create it? 
 
 	 	 	npm start
17. 
How would you create an equivalent JavaScript Syntax Extension (JSX) of the following expression? 

<MyComp> hello </MyComp>
 
 	 	 	<MyComp> {'hello'} </MyComp>
18. 
You have four numbers: 8, 6, 2, and 10. How would you structure and pass them to a component MyComp to result in the number 40? 
 
 	 	 	<MyComp calc = {((8 - 6) + 2) * 10} />
19. 
Which case would you use to name a React event? 
 
 	 	 	Camel case
20. 
The following code must display, Item Number: 70 on the web page. It currently displays, Item Number: g. Why? 

function Foo(props) {
const g = props.itemNo
return <div> Item Number: g</div>
}

function App() {	
return <Foo itemNo={70}/> ;
}
 
 	 	 	You did not express the constant g as a JavaScript Syntax Extension (JSX).


set4

1. 
What do you use the React Testing Library for? 
 
 	 	 	To interact with Document Object Model (DOM) nodes and test components without going into their applied details
2. 
You split a large component into two chunks, UserInfo and Employee. After splitting, your code throws an error. How can you fix the following code? 

function UserInfo(props) {
  return (
    <div>      
      <div>{props.user.info.name}</div>
    </div>
  );
}

function Employee(props) {
  return (
    <div>
      <UserInfo user={props.info} />
      <div> {props.brief} </div>
    </div>
  );
}

const employee = {
  brief: 'I work in XYZ department',
  info: {
    name: 'ABC'
  }
};

function App() {	
  return <Employee    
    brief={employee.brief}
    info={employee.info} />;
}
 
 	 	 	Replace {props.user.info.name} with {props.user.name}.
3. 
Which library provides the createRoot function? 
 
 	 	 	react-dom/client
4. 
UserQuestions and UserAnswers components are loading slowly because of high computations. You must display the UserLoad component until these base components are ready. How would you write the code?
 
 	 	 	<Suspense fallback={<UserLoad/>}>
  <UserQuestions />
  <UserAnswers />
</Suspense>
5. 
You create an application that allows a user to post a custom message inside a pop-up dialog box. To make this application work, you write the following code: 

function App() {
  const takeVal = useRef(null);
 
  function handleAction() {
    alert(`Message: {takeVal.current.value}`);
  }
 
  return (
    <>
      <form onSubmit={handleAction}>
        <label>Post your message :</label>
        <input type="text" ref={takeVal} />
        <button type="submit">Press</button>
      </form>
    </>
  );
}

When the user submits the string message, "Hello, Pluralsight!," the screen displays a line of code instead of the custom message. How can you fix this?  
 
 	 	 	Add $ before {takeVal.current.value}.
6. 
Which built-in hook allows you to debounce without a fixed time delay?
 
 	 	 	useDeferredValue
7. 
An App component creates a table structure to display, React 18 Assessment, on the page. How can you write the body of the Foo component without any errors/warnings? 

function App() {
  return (  
    <table>
      <tbody>
        <tr>
          <Foo />
	 </tr>
      </tbody>
    </table>  	
  );     
}
 
 	 	 	function Foo(props) {
  return (	
     <React.Fragment>	
       <td>React</td>
       <td>18</td>
       <td>Assessment</td>    
     </React.Fragment>	
  );
}
8. 
You write a component to display the profits that your clients gained using the following code: 

function Foo(props) {
  return <div> Profit: props</div>
}

function App() {	
return <Foo profit={784571}/> ;
}

This, however, returns Profit: props on the web page instead of Profit: 784571. How can you correct the code? 
 
 	 	 	Replace props within div with {props.profit}.
9. 
How does the Context.Provider work? 
 
 	 	 	It passes a value to its provider's descendants.
10. 
What does automatic batching improve in React 18?
 
 	 	 	Application performance
11. 
Which statement is correct based on the following code?

const Foo = {
  Que: function Que(props) {
    return <div> Hello, Pluralsight! </div>;
  }
}
 
 	 	 	You can call Que in a JavaScript Syntax Expression (JSX) expression as Foo.Que.
12. 
You create a script to lift the shared state of two components to their parent component as follows:

function Shelf({ children, isClicked, onAction }) {  
  const [tempValue, setTempValue] = useState(0);
  return (
    <section>      
      {isClicked ? (
        <p>{ children }</p>
      ) : (
        <button onClick={onAction}>
          Expand
        </button>
      )}
    </section>
  );
}

function App() {
  return (
    <>      
      <Shelf isClicked={tempValue === 0} onAction={() => setTempValue(0)}>
        Hello, user!
      </Shelf>
      <Shelf isClicked={tempValue === 1} onAction={() => setTempValue(1)}>
        Welcome to Pluralsight. 
      </Shelf>
    </>
  );
}

When you run the script, you receive multiple errors in your terminal console. What steps would you take to recover from the errors? 
 
 	 	 	Place the const [tempValue, setTempValue] = useState(0); statement before the return () statement of the App component.
13. 
The following snippet of code uses PropTypes: 

function Foo(props) {
 return <div> Age: {props.age}</div>
}

function App() {	
 return <Foo age={7}/> ;
}

Foo.propTypes ={
 age: PropTypes.string
};

When you run the code, you receive the output you expect, Age: 7, on the web page but the console results in a warning. How can you remove the warning? 
 
 	 	 	Change the prop type from string to number.
14. 
You are creating an application that uses the following code snippet: 

<label> Is going on a tour: </label>
<input value={chkBox} onChange={(e) => setChkBox(e.target.value)} />
<br />
<label> Number of Students: </label>
<input value={stuNums} onChange={(e) => setStuNums(e.target.value)} />

When the application runs, it should be able to arrive at the following output: 

Is going on a tour: ☑
Number of students: 20

On running the code, you do not receive a checkbox for the first input and you can provide a non-numeric value to the second input as well. What is causing these two issues?  
 
 	 	 	The type property is missing from both the <input> tags.
15. 
An application must go under an end-to-end test. To perform the test, you use the Cypress framework. How can you apply this framework? 
 
 	 	 	Use npm install cypress --save-dev.
16. 
When would you use the npm run build command in your React project? 
 
 	 	 	When you must deploy your project to production
17. 
In the following state variable declaration, which variable's value is set to 5? 

const [count, setCount] = useState(5);
 
 	 	 	count
18. 
You set up the useEffect hook in your component. What is its default action? 
 
 	 	 	It runs the effect whenever a component renders successfully.
19. 
Which attribute allows you to pass a Cascading Style Sheets (CSS) class to a component? 
 
 	 	 	className
20. 
What is the file extension for a Syntactically Awesome Style Sheets (SASS) Cascading Style Sheets (CSS) file? 
 
 	 	 	.scss


set5


1. 
You have an allTypes higher-order component (HOC) that passes all its props throughout the component that it wraps. How would you implement this HOC with a class component Animals? 
 
 	 	 	export default allTypes(Animals);
2. 
You create working code that fetches JSON content from a URL and displays the author name from each of its nodes on the web page. The other two scripts also require the fetching code. How can you modify the following code to improve code reusability? 

const App = () => {
  const [info, setInfo] = useState(null);

  useEffect(() => {URL fetch code goes here} );

  return (
    <>
      {info &&
        info.map((node) => {
          return <p key={node.id}>{node.author}</p>;
        })}
    </>
  );
};
 
 	 	 	Add the following custom hook in a separate script: 

const useGetURL = (url) => {
  const [info, setInfo] = useState(null);
  useEffect(() => URL fetch code goes here);
  return [info];
};
3. 
You create a component foo and call it inside the component App to display React 18 on the web page as follows: 

function foo(props) {
  return <div>React {props.ele}</div>;
}

function App() {
  return <foo ele = "18" />;
}

After running the code, you see a blank page instead the text, React 18. How can you resolve the issue? 
 
 	 	 	Start the component named foo with a capital letter.
4. 
You must process the following line of an uncontrolled component:

<input type = "number" ref = {takeVal} />

What must you write inside the function App() body before the return statement? 
 
 	 	 	const takeVal = useRef(null);
5. 
You write two scripts, demo.js and App.js. You import the functional component Demo from the script demo.js into App.js to display Hello, Pluralsight! on the web page using the following code: 

// demo.js

function Demo(props){
	return <> Hello, {props.name} </>
}

----------------------------------------------------

export default Demo;

// App.js

import { Demo } from './demo.js';

function App() {
	return <Demo name="Pluralsight!"/>
}

export default App;

The main file results in the error, "export 'Demo' (imported as 'Demo') was not found in './demo.js'". How can you resolve the error? 
 
 	 	 	Import Demo inside App.js without wrapping it in curly braces.
6. 
While testing, why would you use jest.useFakeTimers() when you already have a timer-based function such as setTimeout()? 
 
 	 	 	By using jest.useFakeTimers(), you do not have to wait for the code to process and also it does not make the code more complex.
7. 
Which statement is correct about the useEffect hook?  
 
 	 	 	If all the dependencies are the same in each re-render, then the effect will not re-run after each re-render.
8. 
You create a component named Foo with two buttons. One button increments a state and the other decrements a state. You want the component to change the title of the web page when a user clicks on either of the two buttons. To do so, you write the following code: 

function Foo() {
  const [countInc, setCountInc] = useState(0);
  const [countDec, setCountDec] = useState(500);
  useEffect(() => {    
    document.title = `Inc: ${countInc} Dec: ${countDec}`;
  }, [countInc]);
  return (
    <div>      
      <button onClick={() => setCountInc(countInc + 1)}>
        Increment counter
      </button>
      <button onClick={() => setCountDec(countDec - 1)}>
        Decrement counter
      </button>
    </div>
  );
}

This, however, updates the page title only when a user clicks the Increment counter button. How can you resolve the issue with the Decrement counter button? 
 
 	 	 	Add countDec as the second element to the array [countInc].
9. 
Which built-in hook lets you directly access a Document Object Model (DOM) element? 
 
 	 	 	useRef
10. 
What is the correct syntax for defining a React event? 
 
 	 	 	<button onSubmit={submitWork}>
 ...
</button>
11. 
What is the difference between the useMemo hook and the useCallback hook? 
 
 	 	 	The useMemo hook returns a memoized value, whereas the useCallback hook returns a memoized function.
12. 
You have two components on a web page. You must synchronize their states with each other. The update in one of the two components' states must reflect in the other. How would you organize these components in your script? 
 
 	 	 	Transfer the states from both components to their closest common parent and use props to pass values to them.
13. 
In which mode can you run React's strict mode?
 
 	 	 	Development mode
14. 
A component called App calls another functional component called Foo with no arguments. How can you create Foo to increment a state by five (starting from 0) when a user clicks a button? 
 
 	 	 	function Foo() {
 const [count, setCount] = useState(0);
 return (	
   <div>
       <p>{count}</p>
        <button onClick={() => setCount(count + 5)}>
         Press here
        </button>
   </div>
 );
}
15. 
You write a logic in a component, Xdot, to check if a certain product is available in a store. Later, you write two separate functional components that also require the same logic. You write the logic in both of these components but it only increases the length of the script with no code reusability. How else can you improve the script? 
 
 	 	 	Create a custom hook with the logic and call it in each of the two functional components.
16. 
You are creating an application using uncontrolled components. The normal function of a React lifecycle is to override the value attribute of the DOM with the form element, however. What changes can you make in your code to leave the subsequent updates uncontrolled? 
 
 	 	 	Use defaultValue instead of value.
17. 
Why would you choose client-side rendering (CSR) instead of server-side rendering (SSR)? 
 
 	 	 	CSR requires fewer cycles between a server and a client, whereas SSR requires more cycles between a server and a client in comparison to CSR.
18. 
In React 18, which function must you use before using root.render()? 
 
 	 	 	createRoot
19. 
How would you transform the following code into one line? 

var overall = useState('code'); 
var myState = overall[0]; 
var setMyState = overall[1]; 
 
 	 	 	var [myState, setMyState] = useState('code');
20. 
What is true of production.min.js files? 
 
 	 	 	These files contain the production-ready versions of React.


set6

1. 
A prop is eligible for 20 different values. You must ensure that it takes only two values (water and sun) out of 20. How would you code this prop? 
 
 	 	 	PropTypes.oneOf(['water', 'sun'])
2. 
When would you add listeners to an element in React? 
 
 	 	 	During a component rendering
3. 
How can you create a production build after installing the terser-brunch plugin? 
 
 	 	 	Use the brunch build -p command.
4. 
You are creating a React application. In the app, you must import a few files that are 10 nested folders deep into the project structure. You must remove all these nested folders and recreate a structure with a maximum of three nested folders in it. Why should you do this? 
 
 	 	 	Importing a file that is too deep in a structure can result in invalid imports.
5. 
Which conditional statement does the conditional operator use for rendering inline elements? 
 
 	 	 	if-else
6. 
What is the alternative syntax for the expression "&lt;100"? 
 
 	 	 	{'<100'}
7. 
A component called Counter increments the value of a state by 1 starting from 0. How can you write a functional component, MyComp, that creates a yellow background for 500 pixels behind the elements of the Counter component? 

import React from 'react';
import { useRef, useState } from 'react';

function Counter()
{
  const [count, setCount] = useState(0)
  return (
  <div>
    <h3> {count} </h3>
    <button onClick={()=> setCount(count+1) }> Increment </button>
  </div>
  );
}

function App() {
  return <div> <MyComp cmp={Counter} /> </div>       
}

export default App;
 
 	 	 	function MyComp(props)
{
  return <h3 style={{backgroundColor:'yellow', width:500}}> 
            <props.cmp /> </h3>
}
8. 
You split a large component into two components: Employee and UserInfo. The UserInfo component returns the name and ID of an employee. Based on the following starter code, how can you write the UserInfo code? 

function Employee(props) {
  return (
    <div>
      <UserInfo user={props.info} />
      <div> {props.brief} </div>
    </div>
  );
}

const employee = {
  workTitle: 'I work in XYZ department',
  basics: {
    name: 'ABC',
    id: 'PR4532'
  }
};

function App() {	
  return <Employee    
    brief={employee.workTitle}
    info={employee.basics} />;
}
 
 	 	 	function UserInfo(props) {
  return (
    <div>      
      <div>{props.user.name}</div>	  
      <div>{props.user.id}</div>	  
    </div>
  );
}
9. 
You upgrade from React 17 to React 18. Which command replaces unmountComponentAtNode(container)?
 
 	 	 	root.unmount();
10. 
What would you do while working with an application that requires ReactDOMClient.createRoot?
 
 	 	 	Keep legacyRoot: false
11. 
You must create a section on the web page that holds two descriptions. Each section's respective button must control its visibility. Pressing a button must lead to two actions. The first action shows the current description and the second action hides the other description. You run the following script and click on the available button, but it leads to no action. Why?

function Shelf({ children, isClicked, onAction }) {  
  return (
    <section>      
      {isClicked ? (
        <p>{ children }</p>
      ) : (
        <button onClick={onAction}>
          Expand
        </button>
      )}
    </section>
  );
}

function App() {
  const [tempValue, setTempValue] = useState(0);
  return (
    <>      
      <Shelf isClicked={tempValue === 0} onAction={() => setTempValue(0)}>
        Hello, user!
      </Shelf>
      <Shelf isClicked={tempValue === 1} onAction={() => setTempValue(0)}>
        Welcome to Pluralsight. 
      </Shelf>
    </>
  );
} 
 
 	 	 	The setTempValue of the second Shelf component is not set to 1.
12. 
In the following Suspense code, React falls back to the Waiting component if Package is not ready to render:

function handleClick() {
  setTab('package');
}

<Suspense fallback={<Waiting />}>
  {tab === 'machine' ? <Machine /> : <Package />}
</Suspense>

If tab sets to package, you do not want the Waiting component to render. How would you stop it from happening?
 
 	 	 	Wrap setTab('package') inside startTransition().
13. 
You write code to display text that should work across browsers using the inline Cascading Style Sheet (CSS) as follows: 

const customProp = {
  webkitTransition: 'all',
  msTransition: 'all'
};

function Foo() {
  return <div style={customProp}>This is a sample text.</div>;
}

function App() {	
  return <Foo />
}

The text is visible on a Google Chrome page but you receive a warning stating, "Unsupported vendor-prefixed style property". How can you get rid of this warning? 
 
 	 	 	Start webkitTransition with a capital letter.
14. 
Which React method obtains ref and passes it to a document object model (DOM) node? 
 
 	 	 	React.forwardRef()
15. 
What happens if an error occurs within an error boundary? 
 
 	 	 	The error boundary catches the error in its children but not within itself.
16. 
You add the React Developer Tools to your browser because you are starting to work on a React application. After opening the extension tab, the React Developer Tools icon is colorless. What does this mean? 
 
 	 	 	The application does not use a React.js file.
17. 
A code snippet uses multiple renderers inside a component. You have a component that uses react-test-renderer in one of its descendant components. How can you wrap all the updates of the respective renderers during testing? 
 
 	 	 	Use act()
18. 
What would you use to implement the React.forwardRef() inside a higher-order component (HOC)? 
 
 	 	 	render()
19. 
What rule must a web component class follow before you can include it in a React component?
 
 	 	 	The class name must begin with an upper case letter and use a hyphen.
20. 
You have a non-urgent update, setMyFoo(input), in your React web application. React must put this update on hold if a user starts typing on the web page. How would you let React identify that it is a non-urgent update?
 
 	 	 	Import startTransition from react and wrap setMyFoo(input) inside it.




set7


1. 
You are creating an application with components that will be used for payments and signups. To check if the application is working properly, you test how a real browser renders the data, takes data from real APIs, and uses cookies. To do so, you implement different test frameworks but none of them give you the correct result. What can you do now? 
 
 	 	 	Use end-to-end tests.
2. 
You write code to display text with a div that spreads to a height of 100 px and has a yellow background color as follows: 

function Foo() {
  return <div style={height:100, backgroundColor:'yellow'}>
         This is a sample text.</div>;
}

function App() {	
  return <Foo />
}

The component Foo throws a syntax error when created. How can you resolve the problem? 
 
 	 	 	Enclose the style attribute in double curly braces.
3. 
You create a component foo and call it inside the component App to display React 18 on the web page as follows: 

function foo(props) {
  return <div>React {props.ele}</div>;
}

function App() {
  return <foo ele = "18" />;
}

After running the code, you see a blank page instead the text, React 18. How can you resolve the issue? 
 
 	 	 	Start the component named foo with a capital letter.
4. 
You create a custom hook and save it in the useURL.js file. The useURL hook fetches and returns the content of a JSON web page. How would you call this hook in your main component App? 
 
 	 	 	import useURL from "./useURL";

const App = () => {
 const [data] = useURL("https://example.com/jsonData");
 ...
5. 
You have two components on a web page. You must synchronize their states with each other. The update in one of the two components' states must reflect in the other. How would you organize these components in your script? 
 
 	 	 	Transfer the states from both components to their closest common parent and use props to pass values to them.
6. 
What is true of production.min.js files? 
 
 	 	 	These files contain the production-ready versions of React.
7. 
While testing, why would you use jest.useFakeTimers() when you already have a timer-based function such as setTimeout()? 
 
 	 	 	By using jest.useFakeTimers(), you do not have to wait for the code to process and also it does not make the code more complex.
8. 
While running an application, the code gives you a lot of warnings. To remove the warnings, you implement all the required operations, but they make the code longer and slower. How can you fix this issue? 
 
 	 	 	When deploying the program, use the production version.
9. 
You split a large component into two chunks, UserInfo and Employee. After splitting, your code throws an error. How can you fix the following code? 

function UserInfo(props) {
  return (
    <div>      
      <div>{props.user.info.name}</div>
    </div>
  );
}

function Employee(props) {
  return (
    <div>
      <UserInfo user={props.info} />
      <div> {props.brief} </div>
    </div>
  );
}

const employee = {
  brief: 'I work in XYZ department',
  info: {
    name: 'ABC'
  }
};

function App() {	
  return <Employee    
    brief={employee.brief}
    info={employee.info} />;
}
 
 	 	 	Replace {props.user.info.name} with {props.user.name}.
10. 
A function has a high time complexity, which makes it expensive to render every time it runs. The function returns a number after finishing its computation. How can you optimize your script? 
 
 	 	 	Wrap your high-performance computing function inside the useMemo hook.
11. 
You must create an uncontrolled component that takes text from a user and submits it to the handleAction method. How would you implement this logic inside your code?  
 
 	 	 	return (
 <form onSubmit={handleAction}>
  <label>
   Address: <input type="text" ref={takeData} />
  </label>
  <input type="submit" value="Submit" />
 </form>
);
12. 
Where would you apply the key attribute in the following code snippet to run it smoothly without any error or warning? 

function List(props) {
  ...
  return (
    <li>
      {data}
    </li>
  );
}

function MainList(props) {
  ...
  const listItems = amounts.map((amount) =>
    <List data={amount} />
  );

  return (
    <ul>
      {listItems}
    </ul>
  );
}
 
 	 	 	<List key={amount.toString()} data={amount} />
13. 
You create a sample table structure through a component Foo as follows: 

function Foo(props) {
  return (
   <div>
      <td>React</td>
      <td>18</td>
      <td>Assessment</td>
    </div>
  );
}


function App() {
  return (  
    <table>
      <tbody>
        <tr>
         <Foo />
	</tr>
      </tbody>
    </table>  	
  );     
}

The above component displays the table content successfully on the page but also results in several warnings. How can you get rid of the warnings? 
 
 	 	 	Replace <div> </div> inside Foo with <> </>.
14. 
Two new team members on your ongoing React project often break the rules of hooks. This causes several bugs in the overall project. You assign a team member to verify their code for three days, which helps with the problem but it still persists at some level. What further action can you take for these two team members to review their mistakes? 
 
 	 	 	Install and configure the ESLint plugin, eslint-plugin-react-hooks, in your project.
15. 
A component is still not ready to display its results on a web page. How would you handle its loading phase?
 
 	 	 	Use the Suspense component.
16. 
Which package allows you to use the Cascading Style Sheet (CSS)-in-JavaScript (JS) style pattern? 
 
 	 	 	styled-components
17. 
Which statement is correct about the inline and the external Cascading Style Sheets (CSS) styling? 
 
 	 	 	You can use them both side by side in the same component.
18. 
How does lifting a state work in React? 
 
 	 	 	It moves a state to the closest common ancestor of a component that needs it.
19. 
How would you transform the component App using the spread attribute? 

function Foo(props) {
 return <div> My name is {props.name}! I live in building number {props.no} </div>
}

function App() {
 return <Foo name="xyz" no={895} />;
}
 
 	 	 	function App() {
 const props = {"name": "xyz", "no": 895}
 return <Foo {...props} />;
}
20. 
To identify when a focus is entering and leaving an element, you implement the currentTarget and relatedTarget inside the focus events. 

onFocus = {(e) => {
 if (e.currentTarget === e.target) {
  console.log('Focus');
 } 
  console.log('Descendant', e.target);
 }

 if (!e.currentTarget.contains(e.relatedTarget)) {
  console.log('Focus');
 }
}
}

When you run the code, the code snippet does not run as you expect. Why? 
 
 	 	 	You did not associate an else statement to the first if statement.


set8

1. 
You are migrating your project from React 17 to the latest stable version of React 18 using the command yarn add react react-dom. The upgrade finishes with a warning. After upgrading to React 18, you run the command npm start but it results in an error. Why?
 
 	 	 	You did not replace all occurrences of ReactDOM.render() with createRoot().
2. 
What does automatic batching improve in React 18?
 
 	 	 	Application performance
3. 
The following snippet of code uses PropTypes: 

function Foo(props) {
 return <div> Age: {props.age}</div>
}

function App() {	
 return <Foo age={7}/> ;
}

Foo.propTypes ={
 age: PropTypes.string
};

When you run the code, you receive the output you expect, Age: 7, on the web page but the console results in a warning. How can you remove the warning? 
 
 	 	 	Change the prop type from string to number.
4. 
You write a component to print the value of a state variable whose value is set using the setState hook as follows: 

function Foo() {
const [point, setPoint] = useState(-6);
 return (	
   <div>       
      <p> setPoint() </p>
   </div>
 );
}

function App() {
  return <Foo />  
}

You expect the output to be -6 but receive setPoint() on the page. What changes must you make in the code to arrive at the output you expected? 
 
 	 	 	Replace setPoint() with {point}.
5. 
What does <input type = "file" /> allow a user to do? 
 
 	 	 	It lets a user upload one or more files to a server.
6. 
You write code in a Syntactically Awesome Style Sheets (SASS) Cascading Style Sheets (CSS) style.scss file and call it using the code import './style.scss' in your App.js file. Both the files are free of syntactical errors, but when you render the script, you receive an error, "Cannot find module 'sass'". How can you resolve the error? 
 
 	 	 	Install the SASS module npm i -g sass.
7. 
What is the syntax to define a Cascading Style Sheets (CSS) class in a .css file? 
 
 	 	 	.my-class
8. 
The following code must display, Item Number: 70 on the web page. It currently displays, Item Number: g. Why? 

function Foo(props) {
const g = props.itemNo
return <div> Item Number: g</div>
}

function App() {	
return <Foo itemNo={70}/> ;
}
 
 	 	 	You did not express the constant g as a JavaScript Syntax Extension (JSX).
9. 
You must write a Cascading Style Sheets (CSS) file to apply style to a button. The inline style only mentions the minimum width. How would you specify a 6-pixel padding in the CSS file? 
 
 	 	 	.button {
  padding: 6px;
}
10. 
Which browsers is React 18 compatible with?
 
 	 	 	Google Chrome and Mozilla Firefox
11. 
Which attribute specifies an inline Cascading Style Sheet (CSS)? 
 
 	 	 	style
12. 
You create an external Cascading Style Sheet (CSS) and call it inside your component Foo as follows: 

/ style.css
.button {
  cursor: crosshair;
  padding: 80px;
  background: green;
}

-----------------------------------------------

// App.js
import React, { useState } from 'react';
import './style.css';

function Foo() {
  const [count, setCount] = useState(0);
  return (
    <div>
      <p>{count}</p>
      <button style={{cursor:'grab'}} 
              className="button" 
              onClick={() => setCount(count + 1)}>
        Double-click
      </button>
    </div>
  );
}

function App() {	
  return <Foo />
}

export default App;

The component renders successfully but the mouse pointer changes into a grab icon instead of a crosshair. Why? 
 
 	 	 	The inline style takes precedence over the external CSS style.
13. 
A component, Foo, accepts one argument from a user. How can you rewrite the component Foo to make it less verbose? 

function Foo(props) {
const g = {props.itemNo}
return <div> Item number: g</div>
}

function App() {	
return <Foo itemNo={70}/> ;
}
 
 	 	 	function Foo(props) {
return <div> Item number: {props.itemNo}</div>
}
14. 
You write a functional component called Foo in a script, Foo.js, as follows: 

function Foo() {
  return <> Hello, Pluralsight! </>
}

How would you complete this script so that App.js can import the main script? 
 
 	 	 	export default Foo;
15. 
Which is the correct syntax for a React component call? 
 
 	 	 	<Foo> A string literal </Foo>
16. 
What is the output of the following code? 

render() {
  const valid = 1;
  return (
    <div>
      { valid && <h1>The user is: {valid}</h1>}
    </div>
  );
}
 
 	 	 	If valid is true then the output will be The user is: true.
17. 
What is wrong with the following code? 

const prices = (100, 254, 3543, 41455, 52512);
render(
  <PriceList prices={prices} />,
  document.getElementById('root')
);
 
 	 	 	It uses () braces in const prices = (100, 254, 3543, 41455, 52512);.
18. 
How would you use the command-line interface to start your React project once you create it? 
 
 	 	 	npm start
19. 
How many pop-up dialog boxes appear after you left-click the button with the text Show?

function App() {
  function handleAction() {
    alert('Hello, user!');
    alert('Have a good day!');
  }

  return (
    <button onClick={handleAction}>
      Show
    </button>
  );
} 
 
 	 	 	2
20. 
Which keyword creates a variable in React? 
 
 	 	 	const
21. 
What can you use the Create React App command for in your React project? 
 
 	 	 	To create a new single-page application
22. 
What is the correct syntax to call a React component without an additional closing tag? 
 
 	 	 	<Foo />
23. 
How can you create a list of elements before passing it into the map() function? 
 
 	 	 	const num = [34, 56, 34, 23]
24. 
How would you check if the age a user provides is valid for voting or not using the inline rendering conditional operator method?  
 
 	 	 	function App() {
  const age = 53;
  return (
    <div>
      The user is <b>{age ? 'valid' : 'invalid'}</b> for voting.
    </div>
  );
}


set9

1. 
Which syntax dynamically import a function from a module to perform code-splitting in your program? 
 
 	 	 	import("./mymodule").then(abc => {
  console.log(abc.func('hello'));
});
2. 
Which package allows you to use the Cascading Style Sheet (CSS)-in-JavaScript (JS) style pattern? 
 
 	 	 	styled-components
3. 
How can you differentiate between client-side rendering and server-side rendering? 
 
 	 	 	Client-side rendering happens after all the scripts load, whereas server-side rendering does not wait for the scripts to load.
4. 
Which library provides the PropTypes feature in React? 
 
 	 	 	prop-types
5. 
Which HTML tag can maintain its state and only change when a user asks it to? 
 
 	 	 	<textarea>
6. 
You are creating an application with components that will be used for payments and signups. To check if the application is working properly, you test how a real browser renders the data, takes data from real APIs, and uses cookies. To do so, you implement different test frameworks but none of them give you the correct result. What can you do now? 
 
 	 	 	Use end-to-end tests.
7. 
How can you implement the most effective brunch production build into your React project? 
 
 	 	 	By installing the terser-brunch plugin
8. 
You have a non-urgent update, setMyFoo(input), in your React web application. React must put this update on hold if a user starts typing on the web page. How would you let React identify that it is a non-urgent update?
 
 	 	 	Import startTransition from react and wrap setMyFoo(input) inside it.
9. 
You split a large component into two components: Employee and UserInfo. The UserInfo component returns the name and ID of an employee. Based on the following starter code, how can you write the UserInfo code? 

function Employee(props) {
  return (
    <div>
      <UserInfo user={props.info} />
      <div> {props.brief} </div>
    </div>
  );
}

const employee = {
  workTitle: 'I work in XYZ department',
  basics: {
    name: 'ABC',
    id: 'PR4532'
  }
};

function App() {	
  return <Employee    
    brief={employee.workTitle}
    info={employee.basics} />;
}
 
 	 	 	function UserInfo(props) {
  return (
    <div>      
      <div>{props.user.name}</div>	  
      <div>{props.user.id}</div>	  
    </div>
  );
}
10. 
You write code to display text that should work across browsers using the inline Cascading Style Sheet (CSS) as follows: 

const customProp = {
  webkitTransition: 'all',
  msTransition: 'all'
};

function Foo() {
  return <div style={customProp}>This is a sample text.</div>;
}

function App() {	
  return <Foo />
}

The text is visible on a Google Chrome page but you receive a warning stating, "Unsupported vendor-prefixed style property". How can you get rid of this warning? 
 
 	 	 	Start webkitTransition with a capital letter.
11. 
A component called Counter increments the value of a state by 1 starting from 0. How can you write a functional component, MyComp, that creates a yellow background for 500 pixels behind the elements of the Counter component? 

import React from 'react';
import { useRef, useState } from 'react';

function Counter()
{
  const [count, setCount] = useState(0)
  return (
  <div>
    <h3> {count} </h3>
    <button onClick={()=> setCount(count+1) }> Increment </button>
  </div>
  );
}

function App() {
  return <div> <MyComp cmp={Counter} /> </div>       
}

export default App;
 
 	 	 	function MyComp(props)
{
  return <h3 style={{backgroundColor:'yellow', width:500}}> 
            <props.cmp /> </h3>
}
12. 
The following component App calls the component Foo with an element age: 

function Foo(props) {
  return <div> My age is: {props.age} </div>
}

function App() {
return <Foo age=33 />;
}

You expect the output to be, My age is: 33, but you receive a syntax error. How can you resolve the error? 
 
 	 	 	By placing the JavaScript Syntax Extension (JSX) value 33 inside curly braces
13. 
Which React method obtains ref and passes it to a document object model (DOM) node? 
 
 	 	 	React.forwardRef()
14. 
You upgrade from React 17 to React 18. Which command replaces unmountComponentAtNode(container)?
 
 	 	 	root.unmount();
15. 
You apply a ref inside a higher-order component (HOC). What happens? 
 
 	 	 	The HOC implements the ref in the outer component, but not in the wrapped component.
16. 
What can you implement into your code to identify whether the props or state of a component have changed or not? 
 
 	 	 	getDerivedStateFromProps
17. 
What happens if an error occurs within an error boundary? 
 
 	 	 	The error boundary catches the error in its children but not within itself.
18. 
Why is e.persist() no longer required in React 18? 
 
 	 	 	React 18 does not require a pool.
19. 
You apply the terser plugin with a production value to a React project, but it slows down your project. Why? 
 
 	 	 	You added the plugin during development.
20. 
You must declare two inline style properties in a div, height, and width, both equal to 50 pixels. How would you write a component with such a div? 
 
 	 	 	function Foo() {
  return <div style={{height:50, width:50}}> Sample </div>;
}


set10

1. 
Which syntax dynamically import a function from a module to perform code-splitting in your program? 
 
 	 	 	import("./mymodule").then(abc => {
  console.log(abc.func('hello'));
});
2. 
What happens if an error occurs within an error boundary? 
 
 	 	 	The error boundary catches the error in its children but not within itself.
3. 
You apply a ref inside a higher-order component (HOC). What happens? 
 
 	 	 	The HOC implements the ref in the outer component, but not in the wrapped component.
4. 
A component, Foo, prints your organization's annual profits. You can pass a custom profit number to the prop profit. If you do not pass a certain profit number, the profit must be assigned to 800444. To do so, you write the following code: 

function Foo(props) {
return <div> Profit: {props.profit}</div>
}

function App() {	
return <Foo 800444/>;
}

When you run the script, you receive a syntax error in the line return <Foo 800444/>;. How can you resolve the issue? 
 
 	 	 	Remove 800444 and add the following code snippet: 

Foo.defaultProps ={
 profit: '800444'
};
5. 
A web application uses React 17 commands. How would you migrate your project to React 18?
 
 	 	 	npm install react react-dom
6. 
The following component App calls the component Foo with an element age: 

function Foo(props) {
  return <div> My age is: {props.age} </div>
}

function App() {
return <Foo age=33 />;
}

You expect the output to be, My age is: 33, but you receive a syntax error. How can you resolve the error? 
 
 	 	 	By placing the JavaScript Syntax Extension (JSX) value 33 inside curly braces
7. 
You are using Content Delivery Network (CDN) links in your React application. How can you improve the application's error handling performance? 
 
 	 	 	Set access-control-allow-origin to *.
8. 
What can you implement into your code to identify whether the props or state of a component have changed or not? 
 
 	 	 	getDerivedStateFromProps
9. 
Which code correctly includes a web component within a React component?
 
 	 	 	function MyCity() {
  return (
    <city-park class="hilly">
      <div>Ruby</div>
      <div>Pearl</div>
      <div>Sapphire</div>
    </city-park>
  );
}
10. 
Which hook makes concurrent reads possible for external stores in your React project?
 
 	 	 	useSyncExternalStore
11. 
Which test runner helps in a real browser environment and works explicitly? 
 
 	 	 	mocha
12. 
You create a functional component App inside App.js that calls multiple sub-components to display the quarterly sales information of a new startup. How can you render this component inside the file index.js? 
 
 	 	 	import { createRoot } from 'react-dom/client';
const rootElement = createRoot(document.getElementById('root')); rootElement.render(<App />);
13. 
Where can you use the same type of key inside code? 
 
 	 	 	Inside different arrays
14. 
You must declare two inline style properties in a div, height, and width, both equal to 50 pixels. How would you write a component with such a div? 
 
 	 	 	function Foo() {
  return <div style={{height:50, width:50}}> Sample </div>;
}
15. 
You add the React Developer Tools to your browser because you are starting to work on a React application. After opening the extension tab, the React Developer Tools icon is colorless. What does this mean? 
 
 	 	 	The application does not use a React.js file.
16. 
You upgrade from React 17 to React 18. Which command replaces unmountComponentAtNode(container)?
 
 	 	 	root.unmount();
17. 
The App component calls the Foo component three times, each time with a different argument. What tag would you use in place of P and Q to accommodate all three greeting messages within one node? 

function Foo(props) {
  return (	
   <P> Hello {props.name} </P>
  );
}

function App() {
  return (  
  <Q>
    <Foo name="xyz" />	
    <Foo name="abc" />	
    <Foo name="pqr" />	
  </Q>
  );     
}
 
 	 	 	React.Fragment and React.Fragment
18. 
The time is 2:20:10 AM. What is visible on the screen for the first two seconds after you run the following code? 

function tick() {
  const rootElement = (      
      <div>{new Date().toLocaleTimeString()}.</div>    
  );

  const root = createRoot(document.getElementById('root')); 
  root.render(rootElement);
}

setInterval(tick, 5000);
 
 	 	 	An empty page
19. 
A code snippet displays the number of unread messages: 

function Messages(props) {
  const unread = props.unread;
  return (
    <div>
      {if (unread.length > 0) &&
        <h1>
          You have {unread.length} unread messages.
        </h1>
      }
    </div>
  );
}

The existing code fails to display the unread messages in certain cases. Why? 
 
 	 	 	The if condition is not required in the code snippet.
20. 
By default, where could you apply automatic batching after running the command npm install react@17.0.0 react-dom@17.0.0?
 
 	 	 	Event handlers
21. 
You are developing a React project where you need more flexibility and choice on the server-side framework. You consider applying the Next.js toolchain in the project but it requires several configuration steps. How can you improve this? 
 
 	 	 	By adding Razzle



