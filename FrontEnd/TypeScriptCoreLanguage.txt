TypeScript Core Language

set1

1. 
In TypeScript, which library works only in a JavaScript environment with a module loader?
 
 	 	 	Modular
2. 
You have a Ship class defined as follows:


class Ship {
  public name: string;
  public model: string;
  public goSailing() {
    console.log('Bon Voyage');
  }
}


What will happen when you run the following code:

const json = '{"name": "Jenny", "model": "Fishing Boat"}';
const ship: Ship = JSON.parse(json);
ship.goSailing();
 
 	 	 	You will get a JavaScript error that goSailing() is not defined.
3. 
Consider the following type definitions in which you have a Dog class that extends from an Animal class:

declare function feed(creature: any): boolean;
declare function feed(creature: Animal): number;
declare function feed(creature: Dog): string;

Using the above declarations, method callers failed to access the Dog method definition. How can you resolve this issue?
 
 	 	 	Change the definition of your methods as follows:

declare function feed(creature: Dog): string;
declare function feed(creature: Animal): number;
declare function feed(creature: any): boolean;
4. 
What is true of TypeScript's generated JavaScript code for class definitions?
 
 	 	 	TypeScript uses ECMAScript 6 classes when available, but also supports classes when targeting older browsers.
5. 
What belongs in an interface definition?
 
 	 	 	Members with their types, method signatures, and whether the interface extends another interface
6. 
What type of value is number in TypeScript?
 
 	 	 	Floating point
7. 
You are a quality assurance tester for a TypeScript application called mysite. You are testing specific tsconfig.json files against all .ts. files in the mydir directory. What command-line interface (CLI) compile command would you give to accomplish this?
 
 	 	 	tsc -p tsconfig.json mydir/*.ts
8. 
In TypeScript, what are the total number of possible outcomes with a conditional type?
 
 	 	 	Two
9. 
How does TypeScript aid in error checking JavaScript code?
 
 	 	 	TypeScript provides type safety to the JavaScript language
10. 
When would you need to declare a variable with let instead of var?
 
 	 	 	let should be used whenever a variable needs to use block-scoping.
11. 
You have a new laptop and are getting ready to do TypeScript development. You already installed npm but must install TypeScript. What command should you run?
 
 	 	 	npm install -g typescript
12. 
In TypeScript, which symbol defines an optional parameter while creating a function?
 
 	 	 	?
13. 
As a developer, you create a generic class named Collection. What code creates a new number instance named batch1 of class Collection?
 
 	 	 	let batch1 = new Collection<Number>();
14. 
What are the two special types used in TypeScript variables?
 
 	 	 	Null and undefined
15. 
Inside of a TypeScript class, what do you prepend to a class member when referencing it?
 
 	 	 	this.
16. 
What variable declaration keyword in TypeScript allows you to create a variable that cannot be reassigned?
 
 	 	 	const
17. 
What use case would you use the for..of statement for?
 
 	 	 	To loop over an iterable object
18. 
Where can you set compiler options for Typescript outside of CLI commands?
 
 	 	 	tsconfig.json
19. 
You are aiding the marketing team by creating a TypeScript file for their JavaScript code to check for errors. Which code snippet would declare a boolean variable named isChecked as false?
 
 	 	 	var isChecked: boolean = false;
20. 
In Typescript, what symbol is used to declare a decorator?


set2

1. 
You must get an update on the status of a file/directory using --watch. The platform does not support recursive directory watching in the node. In its default mode, the TypeScript compiler is limited by the number of watches it can create. How can you change the compiler to watch the directories and child directories with a polling watch?
 
 	 	 	Set the TSC_WATCHDIRECTORY environment variable to RecursiveDirectoryUsingFsWatchFile.
2. 
A function must call doAsync without resulting in an error. How would you define such a function with minimalistic requirements?

async function doAsync() {
  return 'Some long running operation should go here eventually';
}
 
 	 	 	Define the function without waiting for doAsync or using the keyword async.
3. 
You have been asked to participate in a code review with a fellow teammate. Your teammate requested to know what moduleA refers to in your code below. What option answers his question?

import { modA } from "moduleA"
 
 	 	 	The definition for modA.
4. 
You invoke module tracing to debug a module that you recently created. The module uses import { crawler } from "module1" in the source file /home/scripts/debug.ts. What is the last location the compiler searches for crawler?
 
 	 	 	/module1.d.ts
5. 
A Typescript file you have developed underwent a code review. The reviewers recommended that you should be using type safety within the module Which of the following lines of code best achieves this objective when importing this module?
 
 	 	 	When loading the module, use the keyword typeof.
6. 
When creating a mixin class, what should you do to extend expressions of two different mixin items?
 
 	 	 	Extend them in the target interface.
7. 
You are referencing a class named ExternalClass declared in another library. You get a compiler error when trying to run the following code: const instance = new ExternalClass(); What is one possible reason why your code might not compile?
 
 	 	 	ExternalClass is declared as abstract.
8. 
Which option causes the compiler to generate a require statement for a module?
 
 	 	 	A module identifier is only used as an expression.
9. 
You create a module named dataProc in a module file named dataProc.ts. You must use reference-elision optimization so the module is only loaded when needed. Given the following module definition, what code would only load the module when it's needed?

import { dataProc as dp } from "./dataProc";
 
 	 	 	let dataProc: typeof dp = require("./dataProc");
10. 
You are publishing your declaration file and populated the package.json file with the following information:

{
  "name": "linked-app",
  "version": "5.0",
  "types": "./index.d.ts",
  "typesVersions": {
    ">=3.1": { "*": ["ts3.1/*"] },
    ">=3.2": { "*": ["ts3.2/*"] }
  }
}

The file supports both TypeScript versions 3.1 and 3.2. Furthermore, if none of the versions are available, it falls back to the "./index.d.ts" file. The code in the file does not work, however. What must you change to fix it?
 
 	 	 	Arrange the "typesVersions" in the reverse order.
11. 
In TypeScript, which library works only in a JavaScript environment with a module loader?
 
 	 	 	Modular
12. 
What would be the output of the following code snippet?

function a() {
    console.log("step one");
    return function (target: any, 
                     propertyKey: string, 
                     descriptor: PropertyDescriptor) {
        console.log("step two");
    }
}

function b() {
    return function (target: any, 
                     propertyKey: string, 
                     descriptor: PropertyDescriptor) {
        console.log("step three");
    }
}

class myclass {
    @a()
    @b()
    method() {}
}
 
 	 	 	step one
step three
step two
13. 
Consider the following tuple elements:

let tpls: [number, number, boolean, boolean] = [39, 78, false, true];

While destructuring the above code, which code declaration will capture all four values without throwing any error or using the value undefined?Â 
 
 	 	 	let [t1, ...t2] = tpls;
14. 
You set up project references between your main library and some child projects. Individual projects work fine, but you cannot reference code from one of the children. What is the most likely reason why?
 
 	 	 	You forgot to mark the child project as composite.
15. 
Your code uses node module resolution for a file located at /root/src/moduleA.js. The file contains the import statement var x = require("./moduleB");. What does the compiler do last?
 
 	 	 	Ask the folder /root/src/moduleB if it contains a file named index.js
16. 
You receive an error after running the following class Demo:

function Foo() {
  console.log("Foo(): factory evaluated");
  return function (target: any, propertyKey: number, descriptor: PropertyDescriptor) {
    console.log("Foo called");
  };
}

 
class Demo {
  @Foo()  
  method() {}
}

What changes must you make to display Foo called to the logs?
 
 	 	 	Use string in place of number inside the propertyKey.
17. 
What example would require using trace resolution methods to debug a module?
 
 	 	 	The compiler visits a file outside the current folder when resolving a module.
18. 
You have a Ship class defined as follows:


class Ship {
  public name: string;
  public model: string;
  public goSailing() {
    console.log('Bon Voyage');
  }
}


What will happen when you run the following code:

const json = '{"name": "Jenny", "model": "Fishing Boat"}';
const ship: Ship = JSON.parse(json);
ship.goSailing();
 
 	 	 	You will get a JavaScript error that goSailing() is not defined.
19. 
TypeScript is successfully generating JavaScript files on initial builds, but repeat runs result in errors due to duplicate class definitions. Checking your code reveals no duplicated classes. What is the most likely explanation?
 
 	 	 	TypeScript is including the generated JavaScript code because it is not explicitly excluded in your tsconfig.json file.
20. 
What is the inheritance result of using the implements keyword to create a new class in TypeScript?
 
 	 	 	The new class receives only the shape (duck typing) of the parent class.


Set3

1. 
In TypeScript, which library works only in a JavaScript environment with a module loader?
 
 	 	 	Modular
2. 
What example would require using trace resolution methods to debug a module?
 
 	 	 	The compiler visits a file outside the current folder when resolving a module.
3. 
You are working as a tester for a company developing a TypeScript application. You are compiling different sections of code, but a requirement has been added to compile files without annotations. What compiler options would you use to accomplish this?
 
 	 	 	"compilerOptions": {
        "module": "commonjs",
        "noImplicitAny": true,
        "removeComments": true,
        "sourceMap": true
    }
4. 
What is the correct way to provide a TypeScript services reference while publishing declaration files?
 
 	 	 	/// <reference types="typescript" />
5. 
What response do you receive from the following symbol operation?

let foo = Symbol("demo");
let baz = Symbol("demo");
console.log(foo === baz);
 
 	 	 	false
6. 
A piece of TypeScript code you are working on contains the following array.


const foo = ['one', 'two', 'three'];


You need to create a destructuring statement that assigns the values in const foo to a set of three different variables named first, second, and third. Which line of code would accomplish this?
 
 	 	 	const [first, second, third] = foo;
7. 
As a TypeScript developer, you use symbols to create two new variable types for a TypeScript file. Given the following TypeScript code, why does the output equal false?

let var2 = Symbol("1");
let var3 = Symbol("1");
var2 === var3;
 
 	 	 	Anything declared as a symbol is a unique value.
8. 
What flag can be enabled to provide insight into what happens during the module resolution process?
 
 	 	 	Trace Resolution flag
9. 
What is the end result of destructuring an array?
 
 	 	 	Unpacking array values into distinct variables
10. 
Inside of a TypeScript class, what do you prepend to a class member when referencing it?
 
 	 	 	this.
11. 
What is code refactoring?
 
 	 	 	Restructuring code without changing its external function
12. 
What TypeScript keyword allows an interface to inherit from another interface?
 
 	 	 	extends
13. 
What keyword is used to load an existing module?
 
 	 	 	Import
14. 
What is npm?
 
 	 	 	Both an online JavaScript package registry and a command line utility to install and manage downloadable packages
15. 
You are aiding the marketing team by creating a TypeScript file for their JavaScript code to check for errors. Which code snippet would declare a boolean variable named isChecked as false?
 
 	 	 	var isChecked: boolean = false;
16. 
How can you specify the type annotation for a string variable in TypeScript?
 
 	 	 	Specify the type using :string after the name of the variable.
17. 
In Typescript, what symbol is used to declare a decorator?
 
 	 	 	@
18. 
What file type is generated after a TypeScript file is compiled?
 
 	 	 	JavaScript
19. 
What use case would you use the for..of statement for?
 
 	 	 	To loop over an iterable object
20. 
What variable declaration keyword in TypeScript allows you to create a variable that cannot be reassigned?
 
 	 	 	const

Set4

1. 
You are referencing a class named ExternalClass declared in another library. You get a compiler error when trying to run the following code: const instance = new ExternalClass(); What is one possible reason why your code might not compile?
 
 	 	 	ExternalClass is declared as abstract.
2. 
You have the following two classes:

class Radio {
  public isOn: boolean;
  public name = 'Radio';
}
class Television {
  public isOn: boolean;
  public name = 'Television';
}

What is the result of the following code?

const mediaSource: Radio = new Television();
console.log(mediaSource.name);
 
 	 	 	"Television" appears in the console log.
3. 
When using Typescript, where should you import modules from?
 
 	 	 	The filepath of the module without the extension
4. 
What statement dynamically invokes the module loader?
 
 	 	 	require
5. 
Your development team is modernizing a large TypeScript 3.0 application. In doing so, you put all new declaration files in a /new_custom_project directory. None of the files are being found at compile time, however. What is the first thing you verify when troubleshooting?
 
 	 	 	Check that /new_custom_project is in the "typeRoots" array in the tsconfig.json file.
6. 
A TypeScript file requires you to determine if the interface object Animal contains the type cheetah. Which code uses type assertion to determine if the variable specimen contains the object type cheetah?
 
 	 	 	let specimen = getAnimal();

if ((specimen as Animal).cheetah) {
    (specimen as Animal).cheetah();
}
7. 
What is the purpose of a TypeScript type guard?
 
 	 	 	To perform a runtime check that guarantees the type in some scope
8. 
How would you declare an interface called Vehicle that has an ownerId property that is either a number or null?
 
 	 	 	interface Vehicle {
  ownerId: number | null;
}
9. 
What is code refactoring?
 
 	 	 	Restructuring code without changing its external function
10. 
What TypeScript keyword allows an interface to inherit from another interface?
 
 	 	 	extends
11. 
In TypeScript, which symbol defines an optional parameter while creating a function?
 
 	 	 	?
12. 
What are the two special types used in TypeScript variables?
 
 	 	 	Null and undefined
13. 
What is the most basic data type that returns a true/false value?
 
 	 	 	Boolean
14. 
What keyword is used to load an existing module?
 
 	 	 	Import
15. 
How can you specify the type annotation for a string variable in TypeScript?
 
 	 	 	Specify the type using :string after the name of the variable.
16. 
You are aiding the marketing team by creating a TypeScript file for their JavaScript code to check for errors. Which code snippet would declare a boolean variable named isChecked as false?
 
 	 	 	var isChecked: boolean = false;
17. 
You have been tasked with creating a TypeScript file that utilizes template strings to output data. Given the below code, what option creates a template string variable named sentence to say "Hello, my name is ____" with the variable fullName replacing the blank?


let fullName: string = `person`;
 
 	 	 	let sentence: string = `Hello, my name is ${ fullName }.'
18. 
As a TypeScript development lead, you are responsible for adding functionality to the following interface so that its properties can be optional.


interface myShape {
    color: string;
    length: number;
}


How would you update the code to accomplish this?
 
 	 	 	interface myShape { 
    color?: string; 
    length?: number; 
}
19. 
What variable declaration keyword in TypeScript allows you to create a variable that cannot be reassigned?
 
 	 	 	const
20. 
When you type tsc in the command line, you get an error indicating that tsc is not recognized despite having installed npm. What is the most likely reason for this error?
 
 	 	 	TypeScript is not globally installed.
21. 
You must create a static array to hold data for processing later in your TypeScript file. What code option creates a string array named names that contains the values: person1, person2, person3?
 
 	 	 	let names: string[] = ["person1", "person2", "person3"]
Set5

1. 
What would be the output of the following code snippet?

function a() {
    console.log("step one");
    return function (target: any, 
                     propertyKey: string, 
                     descriptor: PropertyDescriptor) {
        console.log("step two");
    }
}

function b() {
    return function (target: any, 
                     propertyKey: string, 
                     descriptor: PropertyDescriptor) {
        console.log("step three");
    }
}

class myclass {
    @a()
    @b()
    method() {}
}
 
 	 	 	step one
step three
step two
2. 
You are a developer with a piece of TypeScript code that outputs the values of an array called mylist. Your client wants to log the keys of that array instead. How do you adjust the iterator to accomplish this?

let mylist = [100, 200, 3000];

for (let i of mylist) {
    console.log(i); 
}
 
 	 	 	for (let i in mylist) {
    console.log(i);
}
3. 
You set up project references between your main library and some child projects. Individual projects work fine, but you cannot reference code from one of the children. What is the most likely reason why?
 
 	 	 	You forgot to mark the child project as composite.
4. 
You must get an update on the status of a file/directory using --watch. The platform does not support recursive directory watching in the node. In its default mode, the TypeScript compiler is limited by the number of watches it can create. How can you change the compiler to watch the directories and child directories with a polling watch?
 
 	 	 	Set the TSC_WATCHDIRECTORY environment variable to RecursiveDirectoryUsingFsWatchFile.
5. 
You invoke module tracing to debug a module that you recently created. The module uses import { crawler } from "module1" in the source file /home/scripts/debug.ts. What is the last location the compiler searches for crawler?
 
 	 	 	/module1.d.ts
6. 
You create a module named dataProc in a module file named dataProc.ts. You must use reference-elision optimization so the module is only loaded when needed. Given the following module definition, what code would only load the module when it's needed?

import { dataProc as dp } from "./dataProc";
 
 	 	 	let dataProc: typeof dp = require("./dataProc");
7. 
A function must call doAsync without resulting in an error. How would you define such a function with minimalistic requirements?

async function doAsync() {
  return 'Some long running operation should go here eventually';
}
 
 	 	 	Define the function without waiting for doAsync or using the keyword async.
8. 
When creating a mixin class, what should you do to extend expressions of two different mixin items?
 
 	 	 	Extend them in the target interface.
9. 
You have been asked to participate in a code review with a fellow teammate. Your teammate requested to know what moduleA refers to in your code below. What option answers his question?

import { modA } from "moduleA"
 
 	 	 	The definition for modA.
10. 
In TypeScript, which library works only in a JavaScript environment with a module loader?
 
 	 	 	Modular
11. 
You have a Ship class defined as follows:


class Ship {
  public name: string;
  public model: string;
  public goSailing() {
    console.log('Bon Voyage');
  }
}


What will happen when you run the following code:

const json = '{"name": "Jenny", "model": "Fishing Boat"}';
const ship: Ship = JSON.parse(json);
ship.goSailing();
 
 	 	 	You will get a JavaScript error that goSailing() is not defined.
12. 
Which option causes the compiler to generate a require statement for a module?
 
 	 	 	A module identifier is only used as an expression.
13. 
You have a snippet of TypeScript code with method decorators and a decorator function. How can you upgrade the decorator function to return a decorator?
 
 	 	 	Create a designator factory with a decorator that passes an argument.
14. 
Your code uses node module resolution for a file located at /root/src/moduleA.js. The file contains the import statement var x = require("./moduleB");. What does the compiler do last?
 
 	 	 	Ask the folder /root/src/moduleB if it contains a file named index.js
15. 
You receive an error after running the following class Demo:

function Foo() {
  console.log("Foo(): factory evaluated");
  return function (target: any, propertyKey: number, descriptor: PropertyDescriptor) {
    console.log("Foo called");
  };
}

 
class Demo {
  @Foo()  
  method() {}
}

What changes must you make to display Foo called to the logs?
 
 	 	 	Use string in place of number inside the propertyKey.
16. 
You want to introduce project references to an existing TypeScript project. What would you add to the main project's tsconfig.json file to reference a project in the /src/utilities directory?
 
 	 	 	"references": [ 
   { "path": "/src/utilities", "composite": true }
]
17. 
What example would require using trace resolution methods to debug a module?
 
 	 	 	The compiler visits a file outside the current folder when resolving a module.
18. 
You use an ambient module. What happens?
 
 	 	 	The module is automatically included in the compilation process.
19. 
What is the inheritance result of using the implements keyword to create a new class in TypeScript?
 
 	 	 	The new class receives only the shape (duck typing) of the parent class.
20. 
A Typescript file you have developed underwent a code review. The reviewers recommended that you should be using type safety within the module Which of the following lines of code best achieves this objective when importing this module?
 
 	 	 	When loading the module, use the keyword typeof.
21. 
What belongs in an interface definition?
 
 	 	 	Members with their types, method signatures, and whether the interface extends another interface
22. 
You must create a TypeScript file that runs a function after a timeout. The following code results in 10 occurrences of the digit 10:

for (var i = 0; i < 10; i++) {
    setTimeout(function() { console.log(i); }, 100 * i);
}

How would you modify the code while using the existing code features to arrive at 0,1,2,3,4,5,6,7,8,9?
 
 	 	 	for (var i = 0; i < 10; i++) {
    (function(index) {
        setTimeout(function() { console.log(index); }, 100 * index);
    })(i);
}
23. 
What is the output of the console statement in the following TypeScript code?

enum Ball {Soccerball = 1, Baseball, Football}
let ballName: string = Ball[2];

console.log(ballName);
 
 	 	 	"Baseball"
24. 
TypeScript is successfully generating JavaScript files on initial builds, but repeat runs result in errors due to duplicate class definitions. Checking your code reveals no duplicated classes. What is the most likely explanation?
 
 	 	 	TypeScript is including the generated JavaScript code because it is not explicitly excluded in your tsconfig.json file.
25. 
You have a TypeScript file with a top-level import statement. What is the execution scope of this file?
 
 	 	 	Its own scope
26. 
You are working as a tester for a company developing a TypeScript application. You are compiling different sections of code, but a requirement has been added to compile files without annotations. What compiler options would you use to accomplish this?
 
 	 	 	"compilerOptions": {
        "module": "commonjs",
        "noImplicitAny": true,
        "removeComments": true,
        "sourceMap": true
    }
27. 
You have a Rock class saved inside the land.ts file with the following information:

export class Rock {
  element: string;

  area(feedType: string) {
    console.log(feedType);
  }
}

To perform module augmentation, you import the Rock class, declare its interface in the location.ts file, and implement the class properties and method:

import { Rock } from "./land";

declare module "./land" {
  interface Rock {
    age: number;    
    shape(sh:string);
  }
}

const rk = new Rock();

rk.element = "Silicon";
rk.age = 3000;
rk.area("New Orleans");
rk.shape("Oval");

What step did you miss?
 
 	 	 	Providing the interface's method implementation:

Rock.prototype.shape = (sh:string) => `The shape is ${sh}`
28. 
Which TypeScript compiler flag would you use to list the files names used during compilation?
 
 	 	 	--listFilesOnly
29. 
You create an ambient module and store its declaration in a file named aModule.d.ts. What code would correctly create a reference path for this ambient module in your TypeScript file?
 
 	 	 	/// <reference path = "aModule.d.ts" />
30. 
You are publishing your declaration file and populated the package.json file with the following information:

{
  "name": "linked-app",
  "version": "5.0",
  "types": "./index.d.ts",
  "typesVersions": {
    ">=3.1": { "*": ["ts3.1/*"] },
    ">=3.2": { "*": ["ts3.2/*"] }
  }
}

The file supports both TypeScript versions 3.1 and 3.2. Furthermore, if none of the versions are available, it falls back to the "./index.d.ts" file. The code in the file does not work, however. What must you change to fix it?
 
 	 	 	Arrange the "typesVersions" in the reverse order.


set 6

1. 
You invoke module tracing to debug a module that you recently created. The module uses import { crawler } from "module1" in the source file /home/scripts/debug.ts. What is the last location the compiler searches for crawler?
 
 	 	 	/module1.d.ts
2. 
A Typescript file you have developed underwent a code review. The reviewers recommended that you should be using type safety within the module Which of the following lines of code best achieves this objective when importing this module?
 
 	 	 	When loading the module, use the keyword typeof.
3. 
You are referencing a class named ExternalClass declared in another library. You get a compiler error when trying to run the following code: const instance = new ExternalClass(); What is one possible reason why your code might not compile?
 
 	 	 	ExternalClass is declared as abstract.
4. 
When creating a mixin class, what should you do to extend expressions of two different mixin items?
 
 	 	 	Extend them in the target interface.
5. 
You are publishing your declaration file and populated the package.json file with the following information:

{
  "name": "linked-app",
  "version": "5.0",
  "types": "./index.d.ts",
  "typesVersions": {
    ">=3.1": { "*": ["ts3.1/*"] },
    ">=3.2": { "*": ["ts3.2/*"] }
  }
}

The file supports both TypeScript versions 3.1 and 3.2. Furthermore, if none of the versions are available, it falls back to the "./index.d.ts" file. The code in the file does not work, however. What must you change to fix it?
 
 	 	 	Arrange the "typesVersions" in the reverse order.
6. 
You create a module named dataProc in a module file named dataProc.ts. You must use reference-elision optimization so the module is only loaded when needed. Given the following module definition, what code would only load the module when it's needed?

import { dataProc as dp } from "./dataProc";
 
 	 	 	let dataProc: typeof dp = require("./dataProc");
7. 
You have been asked to participate in a code review with a fellow teammate. Your teammate requested to know what moduleA refers to in your code below. What option answers his question?

import { modA } from "moduleA"
 
 	 	 	The definition for modA.
8. 
What would be the output of the following code snippet?

function a() {
    console.log("step one");
    return function (target: any, 
                     propertyKey: string, 
                     descriptor: PropertyDescriptor) {
        console.log("step two");
    }
}

function b() {
    return function (target: any, 
                     propertyKey: string, 
                     descriptor: PropertyDescriptor) {
        console.log("step three");
    }
}

class myclass {
    @a()
    @b()
    method() {}
}
 
 	 	 	step one
step three
step two
9. 
A function must call doAsync without resulting in an error. How would you define such a function with minimalistic requirements?

async function doAsync() {
  return 'Some long running operation should go here eventually';
}
 
 	 	 	Define the function without waiting for doAsync or using the keyword async.
10. 
You use an ambient module. What happens?
 
 	 	 	The module is automatically included in the compilation process.
11. 
Your code uses node module resolution for a file located at /root/src/moduleA.js. The file contains the import statement var x = require("./moduleB");. What does the compiler do last?
 
 	 	 	Ask the folder /root/src/moduleB if it contains a file named index.js
12. 
Which option causes the compiler to generate a require statement for a module?
 
 	 	 	A module identifier is only used as an expression.
13. 
You receive an error after running the following class Demo:

function Foo() {
  console.log("Foo(): factory evaluated");
  return function (target: any, propertyKey: number, descriptor: PropertyDescriptor) {
    console.log("Foo called");
  };
}

 
class Demo {
  @Foo()  
  method() {}
}

What changes must you make to display Foo called to the logs?
 
 	 	 	Use string in place of number inside the propertyKey.
14. 
When are methods that return Promises evaluated?
 
 	 	 	Whenever the method is invokeked
15. 
You have a snippet of TypeScript code with method decorators and a decorator function. How can you upgrade the decorator function to return a decorator?
 
 	 	 	Create a designator factory with a decorator that passes an argument.
16. 
TypeScript is successfully generating JavaScript files on initial builds, but repeat runs result in errors due to duplicate class definitions. Checking your code reveals no duplicated classes. What is the most likely explanation?
 
 	 	 	TypeScript is including the generated JavaScript code because it is not explicitly excluded in your tsconfig.json file.
17. 
You have a Rock class saved inside the land.ts file with the following information:

export class Rock {
  element: string;

  area(feedType: string) {
    console.log(feedType);
  }
}

To perform module augmentation, you import the Rock class, declare its interface in the location.ts file, and implement the class properties and method:

import { Rock } from "./land";

declare module "./land" {
  interface Rock {
    age: number;    
    shape(sh:string);
  }
}

const rk = new Rock();

rk.element = "Silicon";
rk.age = 3000;
rk.area("New Orleans");
rk.shape("Oval");

What step did you miss?
 
 	 	 	Providing the interface's method implementation:

Rock.prototype.shape = (sh:string) => `The shape is ${sh}`
18. 
You set up project references between your main library and some child projects. Individual projects work fine, but you cannot reference code from one of the children. What is the most likely reason why?
 
 	 	 	You forgot to mark the child project as composite.
19. 
Consider the following type definitions in which you have a Dog class that extends from an Animal class:

declare function feed(creature: any): boolean;
declare function feed(creature: Animal): number;
declare function feed(creature: Dog): string;

Using the above declarations, method callers failed to access the Dog method definition. How can you resolve this issue?
 
 	 	 	Change the definition of your methods as follows:

declare function feed(creature: Dog): string;
declare function feed(creature: Animal): number;
declare function feed(creature: any): boolean;
20. 
You must get an update on the status of a file/directory using --watch. The platform does not support recursive directory watching in the node. In its default mode, the TypeScript compiler is limited by the number of watches it can create. How can you change the compiler to watch the directories and child directories with a polling watch?
 
 	 	 	Set the TSC_WATCHDIRECTORY environment variable to RecursiveDirectoryUsingFsWatchFile.
21. 
What is the inheritance result of using the implements keyword to create a new class in TypeScript?
 
 	 	 	The new class receives only the shape (duck typing) of the parent class.
22. 
What is the output of the console statement in the following TypeScript code?

enum Ball {Soccerball = 1, Baseball, Football}
let ballName: string = Ball[2];

console.log(ballName);
 
 	 	 	"Baseball"
23. 
As a TypeScript developer, you must consume the following class process from the file myclass.ts. Given the following code, which option would correctly consume the class as p within your own TypeScript?

class process {
    private current = 0;
    private memory = 0;
    private operator: string;
}
export = process
 
 	 	 	import p = require("./myclass");
24. 
Consider the following tuple elements:

let tpls: [number, number, boolean, boolean] = [39, 78, false, true];

While destructuring the above code, which code declaration will capture all four values without throwing any error or using the value undefined?Â 
 
 	 	 	let [t1, ...t2] = tpls;
25. 
You want to introduce project references to an existing TypeScript project. What would you add to the main project's tsconfig.json file to reference a project in the /src/utilities directory?
 
 	 	 	"references": [ 
   { "path": "/src/utilities", "composite": true }
]
26. 
You have the following two classes:

class Radio {
  public isOn: boolean;
  public name = 'Radio';
}
class Television {
  public isOn: boolean;
  public name = 'Television';
}

What is the result of the following code?

const mediaSource: Radio = new Television();
console.log(mediaSource.name);
 
 	 	 	"Television" appears in the console log.
27. 
Which TypeScript compiler flag would you use to list the files names used during compilation?
 
 	 	 	--listFilesOnly
28. 
You have a TypeScript file with a top-level import statement. What is the execution scope of this file?
 
 	 	 	Its own scope
29. 
You create an ambient module and store its declaration in a file named aModule.d.ts. What code would correctly create a reference path for this ambient module in your TypeScript file?
 
 	 	 	/// <reference path = "aModule.d.ts" />
30. 
Your teammate is referencing a .d.ts file for each of his modules. Instead of defining each module in its own .d.ts file with top-level export declarations, how else can he simplify the module design for easier importing?
 
 	 	 	Create one larger .d.ts file and use the module keyword and the quoted name of the module.

Set7

1. 
What would be the output of the following code snippet?

function a() {
    console.log("step one");
    return function (target: any, 
                     propertyKey: string, 
                     descriptor: PropertyDescriptor) {
        console.log("step two");
    }
}

function b() {
    return function (target: any, 
                     propertyKey: string, 
                     descriptor: PropertyDescriptor) {
        console.log("step three");
    }
}

class myclass {
    @a()
    @b()
    method() {}
}
 
 	 	 	step one
step three
step two
VM862:43 2. 
You must create a TypeScript file that runs a function after a timeout. The following code results in 10 occurrences of the digit 10:

for (var i = 0; i < 10; i++) {
    setTimeout(function() { console.log(i); }, 100 * i);
}

How would you modify the code while using the existing code features to arrive at 0,1,2,3,4,5,6,7,8,9?
 
 	 	 	for (var i = 0; i < 10; i++) {
    (function(index) {
        setTimeout(function() { console.log(index); }, 100 * index);
    })(i);
}
VM862:43 3. 
When executing --watch, what does the compiler rely on that the node provides?
 
 	 	 	fs.watch and fs.watchFile
VM862:43 4. 
You want to invoke a method that returns a result. Once the result is returned due to a promise being resolved, you would like to log the result, log an error if one occurred, and then display a final message, regardless of the outcome. What code would you write to do this?
 
 	 	 	this.doSomething()
   .then(r => console.log(r))
   .catch(e => console.error(e))
   .finally(() => console.log('promise completed'));
VM862:43 5. 
What is true of a JavaScript Promise?
 
 	 	 	It represents an asynchronous operation currently underway and its resulting value
VM862:43 6. 
What is the most basic data type that returns a true/false value?
 
 	 	 	Boolean
VM862:43 7. 
You have been given a TypeScript function that intakes a first name and nickname and returns both in a string. However, the nickname is optional. What code would you add to make the function work with the optional argument?


function myfunc(baseName: string, nickName: string) {
    return baseName + " " + nickName;
}

 
 	 	 	nickName?: string
VM862:43 8. 
What must a class be marked as in another file in order to import it?
 
 	 	 	Export
VM862:43 9. 
What is true about TypeScript's async/await functions?
 
 	 	 	They return a Promise object and you can await only inside an async function.
VM862:43 10. 
As a TypeScript development lead, you are responsible for adding functionality to the following interface so that its properties can be optional.


interface myShape {
    color: string;
    length: number;
}


How would you update the code to accomplish this?
 
 	 	 	interface myShape { 
    color?: string; 
    length?: number; 
}
VM862:43 11. 
What is npm?
 
 	 	 	Both an online JavaScript package registry and a command line utility to install and manage downloadable packages
VM862:43 12. 
For inheritance in TypeScript, what can the extends keyword work with?
 
 	 	 	Interfaces
VM862:43 13. 
What does the presence of the tsconfig.json file in a directory indicate?
 
 	 	 	The directory is the root of the TypeScript project
VM862:43 14. 
What keyword is used to load an existing module?
 
 	 	 	Import
VM862:43 15. 
You are using Typescript 2.0 and above. How would you install a type declaration called "jquery"?
 
 	 	 	npm install --save @types/jquery
VM862:43 16. 
You are working on a Mathematics Application written in Typescript to perform a calculation. How would you use a static typing visibility modifier so the x or y variables aren't accessible from outside the class?

class myMath {
    constructor (x, y) {
    }
    ...
}
var z = new myMath(a, b);
 
 	 	 	constructor (x : private, y : private) {
VM862:43 17. 
You are working on a JavaScript file for a marketing company to help gather information about its customers. You decide to use TypeScript to test the JavaScript code. Given this code, what is causing the error?

function getPerson(person: object) {
    return person;
}

let customer = "Fred";

document.body.textContent = getPerson(customer);
 
 	 	 	The getPerson() function parameter type is object.
VM862:43 18. 
How can you specify the type annotation for a string variable in TypeScript?
 
 	 	 	Specify the type using :string after the name of the variable.
VM862:43 19. 
You have been tasked with creating a TypeScript file that utilizes template strings to output data. Given the below code, what option creates a template string variable named sentence to say "Hello, my name is ____" with the variable fullName replacing the blank?


let fullName: string = `person`;
 
 	 	 	let sentence: string = `Hello, my name is ${ fullName }.'
VM862:43 20. 
What are interfaces used to define the structure of in TypeScript?
 
 	 	 	Objects
