{
  "Which symbol must an object use to become iterable?": "@@iterator",
  "What prints to the console when a web page loads the following scripts?<script>  var foo = 27;  (function () {      foo = 42;  })();</script><script>  console.log(window.foo);</script>": "42",
  "In the following function, the this keyword has a value of undefined. Why?function func1() {  return this;}": "You are using strict mode in this program.",
  "You want to use the following code snippet to emulate a private method using a closure. The code snippet is missing its return statement. Which return statement should you add where it says, \"COMPLETE THE CODE SNIPPET\"?const counter = (function() {  let privateCounter = 0;  function changeBy(val) {     privateCounter += val;  }  return { // COMPLETE THE CODE SNIPPET  };})(); counter.value();counter.increment();": "increment: function() { changeBy(1); },\nvalue: function() { return privateCounter; }",
  "What is the correct syntax for declaring an object literal?": "const obj = {};",
  "You want to add a new language into the following array:燾onst languages = [\"Javascript\", \"Perl\", \"PHP\", \"TCL\"];languages.push(\"Python\");This appends a new language to the end, but you want Python to be the first element in this array. What change would you make?": "Use the unshift method instead of push.",
  "How can you declare a class with a constructor?": "Using the class keyword and the constructor keyword as a property:",
  "How can you define getters and setters without Object.defineProperty() on an object?": "With the get and set keywords",
  "You have a series of three promise objects. You run the following code to complete all three tasks. The code only returns a value of \"promise1\", which means it discarded the other two tasks. How can you change this code so that all three tasks complete?const prom1 = new Promise((resolve) => setTimeout(resolve, 20, 'promise1'));const prom2 = new Promise((resolve) => setTimeout(resolve, 20, 'promise2'));const prom3 = new Promise((resolve) => setTimeout(resolve, 20, 'promise3'));Promise.any([prom1,  prom2, prom3]).then((value) => console.log(value));": "Use the allSettled() function instead.",
  "How can you loop over an iterable object and print each index value to the console?": "for (var i = 0; i < ele.length; i++) {\n  console.log(i)\n}",
  "What is a correct syntax for declaring an arrow function?": "() => {}",
  "How can classes inherit from other classes?": "By using the extends keyword:",
  "The following code takes in a number and determines the tier you belong in. All input is a valid integer between 0 and 1,000 Why does this code not run?const tier = prompt();if (tier <= 1000 && tier >= 800) {  document.write(\"You got top tier!\");} else if (tier <= 800 && tier >= 600) {  document.write(\"You got high tier!\");} else if (tier <= 600 && tier >= 400) {} else if () {  document.write(\"You got low tier!\");} else {  document.write(\"You got bottom tier!\");}": "There is an else if statement without a condition.",
  "You create the following program to determine a score range based on the letter grade you receive:const letterGrade = prompt();switch (letterGrade) {  case \"A\":     document.write(\"You got 90-100! <br>\");  case \"B\":     document.write(\"You got 80-89! <br>\");  case \"C\":     document.write(\"You got 70-79! <br>\");  case \"D\":     document.write(\"You got 60-69! <br>\");  default:    document.write(\"You got 0-59! <br>\");}When you input the letter \"C\" into this program it outputs the following:You got 70-79!You got 60-69!You got 0-59!燞ow can you change this code to only return, You got 70-79! as it should?": "Add a break statement to the bottom of each case statement block.",
  "Which JavaScript operator checks if two operands are of equal value and equal type?": "===",
  "What keyword can you use to declare a value that cannot be reassigned?": "const",
  "What does the ternary operator (condition ? expression1 : expression2) do?": "If the condition is true, the operator returns the value of expression1; otherwise, it returns the value of expression2.",
  "What is the scope of the variable a in the following snippet?function foo() {    var a = 42;}": "The function it is declared in",
  "How can you rewrite the following implementation of a ternary operator into a traditional if...else statement?var x = 0;var y = 1;z = 20;console.log((z < 18) ? x : y);": "if (z < 18) {\n  console.log(x);\n} else {\n  console.log(y);\n}",
  "What code would you use to create a buffer for a typed array with a fixed length of 32-bytes?": "let buffer = new ArrayBuffer(32);",
    "Given the following function expression, how could you refactor this snippet into a named function expression?const myFunction = function() {    // statements}": "const myFunction = function namedFunction(){ // statements }",
    "Why might you use typed arrays instead of standard arrays?": "You must quickly and easily manipulate raw binary data.",
    "What is wrong with this snippet?class MegaArray extends Array{  constructor(contents){    this.contents = contents;  }}let mArr = new MegaArray(1, 2, 3);": "The class constructor does not call super(), so this is not defined when inheriting from Array.",
    "Why would you create a default export in a module?": "To set a fallback value for your module so it is never undefined",
    "Which steps would you take to create multiple views on the same binary data?": "Create a buffer to hold the data and pass the buffer to two different types of TypedArray constructors.",
    "You create the following array, which holds the names of the major oceans on Earth. How can you create an iterable of this array?const oceans = [\"Atlantic\", \"Pacific\", \"Indian\", \"Arctic\", \"Southern\"];": "const iter = oceans[Symbol.iterator]();",
    "Which symbol must an object use to become iterable?": "@@iterator",
    "What is the difference between using the this keyword with an arrow function and an explicit function?": "When you use this with arrow functions it does not establish a binding, which does happen with a regular function.",
    "Internet browsers use which security method to authenticate and encrypt domain name system (DNS) traffic between a user and a server?": "DNSCrypt",
    "Given the following code, how can the function bar reuse the identifier i without affecting the value of i in foo's scope?function foo() {  for (var i = 0; i < 10; i++) {    (function bar() {      // need to use an isolated \"i\" here    })();  }}": "Redeclare i inside bar using var.",
    "Given the following iterator, what happens if you change the flow control if statement from < to >?function makeRangeIterator(end=Infinity) {    let nextIndex = 0;    end = Math.abs(end);    const rangeIterator = {       next: function() {           let result;           if (nextIndex < end) {               result = { value: nextIndex, done: false }               nextIndex++;               return result;           }           return { value: nextIndex, done: true }       }    };    return rangeIterator;}": "The iterator always returns done: true when called because the end range argument cannot be less than 0.",
    "What is a shared characteristic of both iterators and generators?": "Both allow working with potentially large sequences of data in a memory efficient way",
    "What arguments are passed to a catch block of a try...catch...finally?": "The argument passed to the throw statement.",
    "How would you create a default export of a variable length, equal to 12.5 from a module?": "let length;\nexport default length = 12.5;",
    "You are working on a custom JavaScript User object for your web application. You must implement a custom iterable protocol for a collection of User objects, which should allow the web app to display information on all the users in a table. What should the collection's iterator return when called?": "An iterator that is itself an iterable",
    "Which implementation of the .then() function of a Promise would result in error-free code?": "myPromise.then(\n);",
    "Which statement is true about typed arrays?": "Typed arrays do not support the push and pop methods.",
    "What primitive type is the variable result? const result = NaN": "Number",
    "What is one benefit of using Symbol() for unique identifiers?": "Symbol() is hidden and you can keep it private for internal use.",
    "In the following function, the this keyword has a value of undefined. Why?function func1() {  return this;}": "You are using strict mode in this program.",
    "Given the following iterator, what happens if you change the flow control if statement from < to >?function makeRangeIterator(end=Infinity) {    let nextIndex = 0;    end = Math.abs(end);    const rangeIterator = {       next: function() {           let result;           if (nextIndex < end) {               result = { value: nextIndex, done: false }               nextIndex++;               return result;           }           return { value: nextIndex, done: true }       }    };    return rangeIterator;}": "The iterator always returns done: true when called because the end range argument cannot be less than 0.",
    "Which implementation of the .then() function of a Promise would result in error-free code?": "myPromise.then(\n);",
    "How would you create a default export of a variable length, equal to 12.5 from a module?": "let length;\nexport default length = 12.5;",
    "What is a shared characteristic of both iterators and generators?": "Both allow working with potentially large sequences of data in a memory efficient way",
    "You are working on a custom JavaScript User object for your web application. You must implement a custom iterable protocol for a collection of User objects, which should allow the web app to display information on all the users in a table. What should the collection's iterator return when called?": "An iterator that is itself an iterable",
    "A variable, originally declared with the let keyword, is re-declared in an inner block scope using the var keyword. What happens?": "It generates an error.",
    "Which statement is true about typed arrays?": "Typed arrays do not support the push and pop methods.",
    "What arguments are passed to a catch block of a try...catch...finally?": "The argument passed to the throw statement.",
    "Which steps would you take to create multiple views on the same binary data?": "Create a buffer to hold the data and pass the buffer to two different types of TypedArray constructors.",
    "What is the difference between using the this keyword with an arrow function and an explicit function?": "When you use this with arrow functions it does not establish a binding, which does happen with a regular function.",
    "Internet browsers use which security method to authenticate and encrypt domain name system (DNS) traffic between a user and a server?": "DNSCrypt",
    "Given the following function expression, how could you refactor this snippet into a named function expression?const myFunction = function() {    // statements}": "const myFunction = function namedFunction(){ // statements }",
    "Why would you create a default export in a module?": "To set a fallback value for your module so it is never undefined",
    "What static method allows the inheritance of an object's prototype in the creation of a new object?": "Object.create()",
    "What is wrong with this snippet?class MegaArray extends Array{  constructor(contents){    this.contents = contents;  }}let mArr = new MegaArray(1, 2, 3);": "The class constructor does not call super(), so this is not defined when inheriting from Array.",
    "You invoke a constructor function without using the new keyword. What does the function do?": "Assigns the properties to the function's this scope; usually the global object (window in a browser)",
    "How would you add extra properties to a new object, bar, to be created from another object, foo, with Object.create()?": "By passing in an object with the additional keys as a second argument",
    "An infinite iterator is one that never expresses true through what property?": "done",
    "Given the following code, how can the function bar reuse the identifier i without affecting the value of i in foo's scope?function foo() {  for (var i = 0; i < 10; i++) {    (function bar() {      // need to use an isolated \"i\" here    })();  }}": "Redeclare i inside bar using var.",
    "You have a class with two methods. You invoke both methods to compare their outputs. You want to compare these outputs and return a boolean value of true when the outputs are the same value, even in the case of NaN. Which method/operator would you use?": "Object.is()",
    "What is the value of the variable result?const valueOne = \"2\";const valueTwo = \"2\";const result = valueOne / valueTwo;": "1",
    "What primitive type is the variable result? const result = NaN": "Number",
    "How should you change the following snippet so that both loops conclude at the same time?for (let i = 0; i < 5; i++) {  for (let j = 0; j < 5; j++) {    // exit both loops from here  }}": "Add a label and break to it.",
    "Which steps would you take to create multiple views on the same binary data?": "Create a buffer to hold the data and pass the buffer to two different types of TypedArray constructors.",
    "A variable, originally declared with the let keyword, is re-declared in an inner block scope using the var keyword. What happens?": "It generates an error.",
    "Given the following code, how can the function bar reuse the identifier i without affecting the value of i in foo's scope?function foo() {  for (var i = 0; i < 10; i++) {    (function bar() {      // need to use an isolated \"i\" here    })();  }}": "Redeclare i inside bar using var.",
    "What arguments are passed to a catch block of a try...catch...finally?": "The argument passed to the throw statement.",
    "Which implementation of the .then() function of a Promise would result in error-free code?": "myPromise.then(\n);",
    "What is a shared characteristic of both iterators and generators?": "Both allow working with potentially large sequences of data in a memory efficient way",
    "How would you add extra properties to a new object, bar, to be created from another object, foo, with Object.create()?": "By passing in an object with the additional keys as a second argument",
    "Internet browsers use which security method to authenticate and encrypt domain name system (DNS) traffic between a user and a server?": "DNSCrypt",
    "You are working on a custom JavaScript User object for your web application. You must implement a custom iterable protocol for a collection of User objects, which should allow the web app to display information on all the users in a table. What should the collection's iterator return when called?": "An iterator that is itself an iterable",
    "Why would you create a default export in a module?": "To set a fallback value for your module so it is never undefined",
    "What is the difference between using the this keyword with an arrow function and an explicit function?": "When you use this with arrow functions it does not establish a binding, which does happen with a regular function.",
    "Given the following function expression, how could you refactor this snippet into a named function expression?const myFunction = function() {    // statements}": "const myFunction = function namedFunction(){ // statements }",
    "What primitive type is the variable result? const result = NaN": "Number",
    "Which statement is true about typed arrays?": "Typed arrays do not support the push and pop methods.",
    "You create a new page on a website that accepts user input, stores the input into a variable input, and grabs some related data from a database. How can you take the user input in a safe and efficient manner?": "let input = prompt(<question>);",
    "Which symbol must an object use to become iterable?": "@@iterator",
    "How would you create a default export of a variable length, equal to 12.5 from a module?": "let length;\nexport default length = 12.5;",
    "What static method allows the inheritance of an object's prototype in the creation of a new object?": "Object.create()",
    "In the following function, the this keyword has a value of undefined. Why?function func1() {  return this;}": "You are using strict mode in this program.",
    "Which code snippet declares a new property called prop on obj1, defined below, that you can change with the assignment operator?const obj1 = {};": "Object.defineProperty(obj1, 'prop', {\n  writable: true,\n  configurable: true,\n});",
    "Given the following iterator, what happens if you change the flow control if statement from < to >?function makeRangeIterator(end=Infinity) {    let nextIndex = 0;    end = Math.abs(end);    const rangeIterator = {       next: function() {           let result;           if (nextIndex < end) {               result = { value: nextIndex, done: false }               nextIndex++;               return result;           }           return { value: nextIndex, done: true }       }    };    return rangeIterator;}": "The iterator always returns done: true when called because the end range argument cannot be less than 0.",
    "What arguments are passed to a catch block of a try...catch...finally?": "The argument passed to the throw statement.",
    "Which implementation of the .then() function of a Promise would result in error-free code?": "myPromise.then();",
    "What is a shared characteristic of both iterators and generators?": "Both allow working with potentially large sequences of data in a memory efficient way",
    "A variable, originally declared with the let keyword, is re-declared in an inner block scope using the var keyword. What happens?": "It generates an error.",
    "Which symbol must an object use to become iterable?": "@@iterator",
    "Given the following code, how can the function bar reuse the identifier i without affecting the value of i in foo's scope?function foo() {  for (var i = 0; i < 10; i++) {    (function bar() {      // need to use an isolated \"i\" here    })();  }}": "Redeclare i inside bar using var.",
    "Which steps would you take to create multiple views on the same binary data?": "Create a buffer to hold the data and pass the buffer to two different types of TypedArray constructors.",
    "What primitive type is the variable result? const result = NaN": "Number",
    "Why would you create a default export in a module?": "To set a fallback value for your module so it is never undefined",
    "In the following code snippet, getConfig is a function that returns data on the config object, at the time of invocation, for different parts of your application. When invoked this way, getConfig instead returns undefined. What change must you make to get the functionality you intend?let config = {  data: { \"number\": 99 },  getConfig: function() { return this.data; }};let getConfig = config.getConfig;getConfig();": "Bind the function's this value to config.",
    "How would you add extra properties to a new object, bar, to be created from another object, foo, with Object.create()?": "By passing in an object with the additional keys as a second argument",
    "What is the difference between using the this keyword with an arrow function and an explicit function?": "When you use this with arrow functions it does not establish a binding, which does happen with a regular function.",
    "Given the following function expression, how could you refactor this snippet into a named function expression?const myFunction = function() {    // statements}": "const myFunction = function namedFunction(){ // statements }",
    "How would you create a default export of a variable length, equal to 12.5 from a module?": "let length;export default length = 12.5;",
    "Which statement is true about typed arrays?": "Typed arrays do not support the push and pop methods.",
    "What static method allows the inheritance of an object's prototype in the creation of a new object?": "Object.create()",
    "When creating a class, how can you define a method that is not accessible from an instance of that class, but instead only callable directly on the class?": "Using the static keyword:",
    "What happens when you run the following code?function func1(arg1) {  arguments[0] = 99;  console.log(arg1);}function func2(arg1) {  arg1 = 99;  console.log(arguments[1]);}func1(10);func2(10);": "You get the following output:",
    "What is one benefit of using Symbol() for unique identifiers?": "Symbol() is hidden and you can keep it private for internal use.",
    "Given the following iterator, what happens if you change the flow control if statement from < to >?function makeRangeIterator(end=Infinity) {    let nextIndex = 0;    end = Math.abs(end);    const rangeIterator = {       next: function() {           let result;           if (nextIndex < end) {               result = { value: nextIndex, done: false }               nextIndex++;               return result;           }           return { value: nextIndex, done: true }       }    };    return rangeIterator;}": "The iterator always returns done: true when called because the end range argument cannot be less than 0.",
    "What value prints to the console in the following code snippet?this.greeting = \"Hello, Universe!\";let person = {  greeting: \"Hello, World!\",  greetUser: () => {    console.log(this.greeting);  }};person.greetUser();": "\"Hello, Universe!\"",
    "You create the following typed array and manipulate and iterate on it. You want to convert this typed array into a normal, non-typed array. How can you do so?const myArr = new Int8Array(10);myArr.fill(14);": "const normalArray2 = [...myArr];",
    "You must refactor some JavaScript code written for ES5, as follows:var obj1 = {\"color\": \"blue\", \"model\": \"Model1\", \"make\": \"Brand1\"};var list = [];for(var prop in obj1) {    list.push(obj1[prop]);}console.log(list);How can you refactor away from the for loop and use a more efficient, up-to-date method?": "Pass obj1 as a parameter to the Object.values() method and embed the Object.values() method inside a console.log() statement.",
    "How would you remove the duplicates from the following array using the spread operator?let array = [0, 1, 1, 2, 3, 4, 4];": "let noDups = [...new Set(array)];",
    "Which is a \"truthy\" value?": "{}",
    "In the following code snippet, getConfig is a function that returns data on the config object, at the time of invocation, for different parts of your application. When invoked this way, getConfig instead returns undefined. What change must you make to get the functionality you intend?let config = {  data: { \"number\": 99 },  getConfig: function() { return this.data; }};let getConfig = config.getConfig;getConfig();": "Bind the function's this value to config.",
    "Internet browsers use which security method to authenticate and encrypt domain name system (DNS) traffic between a user and a server?": "DNSCrypt",
    "How would you add extra properties to a new object, bar, to be created from another object, foo, with Object.create()?": "By passing in an object with the additional keys as a second argument",
    "Which implementation of the .then() function of a Promise would result in error-free code?": "myPromise.then();",
    "You are working on a custom JavaScript User object for your web application. You must implement a custom iterable protocol for a collection of User objects, which should allow the web app to display information on all the users in a table. What should the collection's iterator return when called?": "An iterator that is itself an iterable",
    "How would you create a default export of a variable length, equal to 12.5 from a module?": "let length;export default length = 12.5;",
    "Given the following function expression, how could you refactor this snippet into a named function expression?const myFunction = function() {    // statements}": "const myFunction = function namedFunction(){ // statements }",
    "What static method allows the inheritance of an object's prototype in the creation of a new object?": "Object.create()",
    "A variable, originally declared with the let keyword, is re-declared in an inner block scope using the var keyword. What happens?": "It generates an error.",
    "What is the difference between using the this keyword with an arrow function and an explicit function?": "When you use this with arrow functions it does not establish a binding, which does happen with a regular function.",
    "Which symbol must an object use to become iterable?": "@@iterator",
    "When creating a class, how can you define a method that is not accessible from an instance of that class, but instead only callable directly on the class?": "Using the static keyword:class Foo {  static logFoo(f){    console.log(f);  }}",
    "What is one benefit of using Symbol() for unique identifiers?": "Symbol() is hidden and you can keep it private for internal use.",
    "What is a shared characteristic of both iterators and generators?": "Both allow working with potentially large sequences of data in a memory efficient way",
    "What primitive type is the variable result? const result = NaN": "Number",
    "What arguments are passed to a catch block of a try...catch...finally?": "The argument passed to the throw statement.",
    "Which steps would you take to create multiple views on the same binary data?": "Create a buffer to hold the data and pass the buffer to two different types of TypedArray constructors.",
    "Given the following code, how can the function bar reuse the identifier i without affecting the value of i in foo's scope?function foo() {  for (var i = 0; i < 10; i++) {    (function bar() {      // need to use an isolated \"i\" here    })();  }}": "Redeclare i inside bar using var.",
    "Given the following iterator, what happens if you change the flow control if statement from < to >?function makeRangeIterator(end=Infinity) {    let nextIndex = 0;    end = Math.abs(end);    const rangeIterator = {       next: function() {           let result;           if (nextIndex < end) {               result = { value: nextIndex, done: false }               nextIndex++;               return result;           }           return { value: nextIndex, done: true }       }    };    return rangeIterator;}": "The iterator always returns done: true when called because the end range argument cannot be less than 0.",
    "What boolean does the following code return? Symbol(\"foo\") !== Symbol(\"foo\")": "true",
    "Which function type has the this keyword bound lexically?": "An arrow function",
    "What happens when you run the following code?function func1(arg1) {  arguments[0] = 99;  console.log(arg1);}function func2(arg1) {  arg1 = 99;  console.log(arguments[1]);}func1(10);func2(10);": "You get the following output:99undefined",
    "You create a new page on a website that accepts user input, stores the input into a variable input, and grabs some related data from a database. How can you take the user input in a safe and efficient manner?": "let input = prompt(<question>);",
    "Which code snippet declares a new property called prop on obj1, defined below, that you can change with the assignment operator?const obj1 = {};": "Object.defineProperty(obj1, 'prop', {  writable: true,  configurable: true,});",
    "In the following function, the this keyword has a value of undefined. Why?function func1() {  return this;}": "You are using strict mode in this program.",
    "What happens when the following code runs?let foo = {      get name(){        return this.name;    },      set name(n){        this.name = n;    }}foo.name = \"foo\";": "A recursive call to the setter causes a RangeError to be thrown because it exceeds the maximum call stack size.",
    "You create the following array, which holds the names of the major oceans on Earth. How can you create an iterable of this array?const oceans = [\"Atlantic\", \"Pacific\", \"Indian\", \"Arctic\", \"Southern\"];": "const iter = oceans[Symbol.iterator]();",
    "What is the value of the variable result?const valueOne = \"2\";const valueTwo = \"2\";const result = valueOne / valueTwo;": "1",
    "What is the value of x after running the following code snippet?let x = 0;function foo(){  x ^= 1;}foo();foo();foo();": "1",
    "An infinite iterator is one that never expresses true through what property?": "done"
  }